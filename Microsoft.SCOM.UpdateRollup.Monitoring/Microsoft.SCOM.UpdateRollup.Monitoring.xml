<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <Manifest>
        <Identity>
            <ID>Microsoft.SCOM.UpdateRollup.Monitoring</ID>
            <Version>2025.1.28.0</Version>
        </Identity>
        <Name>Microsoft.SCOM.UpdateRollup.Monitoring</Name>
        <References>
            <Reference Alias="Windows">
                <ID>Microsoft.Windows.Library</ID>
                <Version>7.5.8501.0</Version>
                <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
            </Reference>
            <Reference Alias="System">
                <ID>System.Library</ID>
                <Version>7.5.8501.0</Version>
                <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
            </Reference>
            <Reference Alias="SystemCenter">
                <ID>Microsoft.SystemCenter.Library</ID>
                <Version>7.0.8433.0</Version>
                <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
            </Reference>
            <Reference Alias="Health">
                <ID>System.Health.Library</ID>
                <Version>7.0.8433.0</Version>
                <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
            </Reference>
        </References>
    </Manifest>
    <TypeDefinitions>
        <EntityTypes>
            <ClassTypes>
                <ClassType ID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false">
                    <Property ID="ComputerType" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="OperatingSystem" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="Product" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="AgentInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="AgentVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ManagementGroups" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="HealthServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="CertificateExpiry" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ADIntegration" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="APMServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ACSForwarderServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="LogAnalyticsWorkspaces" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ManagementServerInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ManagementServerVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ConfigServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="DataAccessServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="OpsDbName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="OpsDbServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="DWDbName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="DwDbServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ACSCollectorInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ACSCollectorVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ACSCollectorServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="RMS" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="GatewayServerInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="GatewayServerVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="WebConsoleInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="WebConsoleVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="AuthenticationMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="DefaultServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="WebConsoleUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ApmAdvisorUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ApmDiagnosticsUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ReportServerInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ReportServerVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ReportServerDwDbServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ReportServerDWDBName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ReportServerUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="SRSInstance" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ReportServerServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ConsoleInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                    <Property ID="ConsoleVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
                </ClassType>
            </ClassTypes>
        </EntityTypes>
        <ModuleTypes>
            <DataSourceModuleType ID="Microsoft.SCOM.UpdateRollup.DataSource.WindowsComputer" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element name="IntervalSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element name="SyncTime" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
                    <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
                                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                                <SyncTime>$Config/SyncTime$</SyncTime>
                                <ScriptName>GetWindowsURInfo.ps1</ScriptName>
                                <ScriptBody><![CDATA[
                                    Param ($SourceId, $ManagedEntityId, $ComputerName)
                                    Function Write-Log {
                                        Param($ScriptState)
                                        if ($ScriptState -eq "Information") {
                                            $EventId = 17609
                                            $EventLevel = 0 # 0=Info
                                        }
                                        else {
                                            $EventId = 17610
                                            $EventLevel = 2 # 2=Warning
                                        }
                                        $End = Get-Date
                                        $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
                                        $Minutes = $TimeCount.Minutes
                                        $Seconds = $TimeCount.Seconds
                                        $Milliseconds = $TimeCount.Milliseconds
                                        $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
                                        Break
                                    }
                                    Function Get-URInfo {
                                        # This logs terminating and non-terminating events.
                                        $ErrorActionPreference = "Stop"
                                        Try {
                                            $ScriptState = "Information"
                                            <# FOR TESTING
                                            $SourceId = '{00000000-0000-0000-0000-000000000000}'
                                            $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
                                            $ComputerName = 'agent.scomtest.local'
                                            #>
                                            $DiscoveryData = $MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
                                            # Get PowerShell version.
                                            $PSVersion = $PSVersionTable.PSVersion
                                            [string]$PSMajor = $PSVersion.Major
                                            [string]$PSMinor = $PSVersion.Minor
                                            $PSVersion = $PSMajor + "." + $PSMinor
                                            # Get basic info.
                                            $ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
                                            $WinDir = (Get-ChildItem Env:windir).Value
                                            $OperatingSystem = (Get-WmiObject Win32_OperatingSystem).Caption
                                            $ComputerType = (Get-WmiObject Win32_ComputerSystem).Model
                                            # Get SCOM role.
                                            $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
                                            $Product = (Get-ItemProperty -Path $SetupRegKey).Product
                                            <#
                                            COMMON SECTION. This applies to all agents, gateways and management servers.
                                            #>
                                            # Get management groups.
                                            $InstallDirectory = (Get-ItemProperty -Path $SetupRegKey).InstallDirectory.TrimEnd("\")
                                            $MGFolders = Get-ChildItem -Path "$InstallDirectory\Health Service State\Connector Configuration Cache"
                                            $MGFolders | ForEach-Object {
                                                $MGName = $_.Name
                                                $ManagementGroups += "$MGName,"
                                                $ConfigFile = "$InstallDirectory\Health Service State\Connector Configuration Cache\$MGName\OpsMgrConnector.Config.xml"
                                                If (-Not(Test-Path -Path $ConfigFile)) {
                                                    $ScriptState = "Warning"
                                                    $Message += "Management group '$MGName' is missing file $ConfigFile.`n"
                                                }
                                            }
                                            $ManagementGroups = $ManagementGroups.TrimEnd(",")
                                            # Get HealthService account. We just want to know the account it's using, don't care about service state.
                                            $HealthServiceAccount = (Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\HealthService").ObjectName
                                            # Get certificate.
                                            $CertRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Machine Settings"
                                            If ((Get-ItemProperty -Path $CertRegKey -ErrorAction SilentlyContinue).ChannelCertificateHash) {
                                                $Hash = (Get-ItemProperty -Path $CertRegKey).ChannelCertificateHash
                                                $Thumbprint = Get-ChildItem -Path cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq $Hash }
                                                $CertificateExpiry = $Thumbprint.NotAfter.ToString("yyyy/MM/dd HH:mm:ss")
                                            }
                                            Else {
                                                $CertificateExpiry = "None"
                                            }
                                            # Get AD Integration. This will be on every server so just see if it's enabled or disabled.
                                            $ADIntegRegKey = "HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters\ConnectorManager"
                                            $ADIntegration = (Get-ItemProperty -Path $ADIntegRegKey -ErrorAction SilentlyContinue).EnableADIntegration
                                            Switch ($ADIntegration) {
                                                "0" { $ADIntegration = "Disabled"; BREAK }
                                                "1" { $ADIntegration = "Enabled"; BREAK }
                                            }
                                            # Get APM status. This may not be on every server so just get service state otherwise set to Not installed.
                                            $APMServiceRegKey = "HKLM:\SYSTEM\CurrentControlSet\Services\System Center Management APM"
                                            If (Get-Item -Path $APMServiceRegKey -ErrorAction SilentlyContinue) {
                                                $APMServiceStartMode = (Get-ItemProperty -Path $APMServiceRegKey -ErrorAction SilentlyContinue).Start
                                                Switch ($APMServiceStartMode) {
                                                    "2" { $APMServiceStartMode = "Automatic"; BREAK }
                                                    "3" { $APMServiceStartMode = "Manual"; BREAK }
                                                    "4" { $APMServiceStartMode = "Disabled"; BREAK }
                                                }
                                            }
                                            Else {
                                                $APMServiceStartMode = "Not installed"
                                            }
                                            # Get ACS forwarder. This will be on every server so just get the service status.
                                            $ACSForwarderServiceRegKey = "HKLM:SYSTEM\CurrentControlSet\Services\AdtAgent"
                                            $ACSForwarderServiceStartMode = (Get-ItemProperty -Path $ACSForwarderServiceRegKey -ErrorAction SilentlyContinue).Start
                                            Switch ($ACSForwarderServiceStartMode) {
                                                "2" { $ACSForwarderServiceStartMode = "Automatic"; BREAK }
                                                "3" { $ACSForwarderServiceStartMode = "Manual"; BREAK }
                                                "4" { $ACSForwarderServiceStartMode = "Disabled"; BREAK }
                                            }
                                            # Get Log Analytics workspaces. Use the registry as it's more reliable than AgentConfigManager.MgmtSvcCfg.
                                            $LAWorkspaceRegKey = "HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters\Service Connector Services"
                                            If ((Get-Item -Path $LAWorkspaceRegKey -ErrorAction SilentlyContinue).SubKeyCount -gt 0) {
                                                (Get-Item $LAWorkspaceRegKey).GetSubKeyNames() | ForEach-Object {
                                                    $LAWorkspaceId = $_.Substring(16) # Remove "Log Analytics - " from the key name so we just have the workspace id.
                                                    $LogAnalyticsWorkspaces += "$LAWorkspaceId,"
                                                }
                                                $LogAnalyticsWorkspaces = $LogAnalyticsWorkspaces.TrimEnd(",")
                                            }
                                            Else {
                                                $LogAnalyticsWorkspaces = "None"
                                            }
                                            <#
                                            AGENTS. This section only applies to agents.
                                            #>
                                            If ((Get-ItemProperty -Path $SetupRegKey -ErrorAction SilentlyContinue).AgentVersion) {
                                                $AgentInstallDirectory = (Get-ItemProperty -Path $SetupRegKey).InstallDirectory.TrimEnd("\")
                                                $AgentVersion = (Get-Item "$AgentInstallDirectory\Tools\TMF\OMAgentTraceTMFVer.Dll").VersionInfo.FileVersion
                                                Switch ($AgentVersion) {
                                                    # SCOM 2012 R2
                                                    "7.1.10184.0" { $AgentVersion = "2012 R2 RTM"; BREAK }
                                                    "7.1.10195.0" { $AgentVersion = "2012 R2 UR2"; BREAK }
                                                    "7.1.10204.0" { $AgentVersion = "2012 R2 UR3"; BREAK }
                                                    "7.1.10211.0" { $AgentVersion = "2012 R2 UR4"; BREAK }
                                                    "7.1.10213.0" { $AgentVersion = "2012 R2 UR5"; BREAK }
                                                    "7.1.10218.0" { $AgentVersion = "2012 R2 UR6"; BREAK }
                                                    "7.1.10229.0" { $AgentVersion = "2012 R2 UR7"; BREAK }
                                                    "7.1.10241.0" { $AgentVersion = "2012 R2 UR8"; BREAK }
                                                    "7.1.10268.0" { $AgentVersion = "2012 R2 UR9"; BREAK }
                                                    "7.1.10285.0" { $AgentVersion = "2012 R2 UR11"; BREAK }
                                                    "7.1.10292.0" { $AgentVersion = "2012 R2 UR12"; BREAK }
                                                    "7.1.10302.0" { $AgentVersion = "2012 R2 UR13"; BREAK }
                                                    "7.1.10305.0" { $AgentVersion = "2012 R2 UR14"; BREAK }
                                                    # SCOM 2016
                                                    "8.0.10918.0" { $AgentVersion = "2016 RTM"; BREAK }
                                                    "8.0.10931.0" { $AgentVersion = "2016 UR1"; BREAK }
                                                    "8.0.10949.0" { $AgentVersion = "2016 UR2"; BREAK }
                                                    "8.0.10970.0" { $AgentVersion = "2016 UR3"; BREAK }
                                                    "8.0.10977.0" { $AgentVersion = "2016 UR4"; BREAK }
                                                    "8.0.10990.0" { $AgentVersion = "2016 UR5"; BREAK }
                                                    "8.0.11004.0" { $AgentVersion = "2016 UR6"; BREAK }
                                                    "8.0.11025.0" { $AgentVersion = "2016 UR7"; BREAK }
                                                    "8.0.11037.0" { $AgentVersion = "2016 UR8"; BREAK }
                                                    "8.0.11049.0" { $AgentVersion = "2016 UR9"; BREAK }
                                                    "8.0.11057.0" { $AgentVersion = "2016 UR10"; BREAK }
                                                    # SCOM 1801
                                                    "8.0.13053.0" { $AgentVersion = "1801"; BREAK }
                                                    "8.0.13067.0" { $AgentVersion = "1807"; BREAK }
                                                    # SCOM 2019
                                                    "10.19.10014.0" { $AgentVersion = "2019 RTM"; BREAK }
                                                    "10.19.10140.0" { $AgentVersion = "2019 UR1"; BREAK }
                                                    "10.19.10153.0" { $AgentVersion = "2019 UR2"; BREAK }
                                                }
                                            }
                                            Else {
                                                $AgentInstallDirectory = "n/a"
                                                $AgentVersion = "n/a"
                                            }
                                            <#
                                            MANAGEMENT SERVERS. This section only applies to management servers.
                                            #>
                                            If ((Get-ItemProperty -Path $SetupRegKey -ErrorAction SilentlyContinue).ServerVersion) {
                                                $ManagementServerInstallDirectory = (Get-ItemProperty -Path $SetupRegKey).InstallDirectory.TrimEnd("\")
                                                $ManagementServerVersion = (Get-Item "$ManagementServerInstallDirectory\Tools\TMF\OMTraceTMFVer.Dll").VersionInfo.FileVersion
                                                Switch ($ManagementServerVersion) {
                                                    # SCOM 2012 R2
                                                    "7.1.10226.0" { $ManagementServerVersion = "2012 R2 RTM"; BREAK }
                                                    "7.1.10226.1009" { $ManagementServerVersion = "2012 R2 UR1"; BREAK }
                                                    "7.1.10226.1015" { $ManagementServerVersion = "2012 R2 UR2"; BREAK }
                                                    "7.1.10226.1037" { $ManagementServerVersion = "2012 R2 UR3"; BREAK }
                                                    "7.1.10226.1046" { $ManagementServerVersion = "2012 R2 UR4"; BREAK }
                                                    "7.1.10226.1052" { $ManagementServerVersion = "2012 R2 UR5"; BREAK }
                                                    "7.1.10226.1064" { $ManagementServerVersion = "2012 R2 UR6"; BREAK }
                                                    "7.1.10226.1090" { $ManagementServerVersion = "2012 R2 UR7"; BREAK }
                                                    "7.1.10226.1118" { $ManagementServerVersion = "2012 R2 UR8"; BREAK }
                                                    "7.1.10226.1177" { $ManagementServerVersion = "2012 R2 UR9"; BREAK }
                                                    "7.1.10226.1239" { $ManagementServerVersion = "2012 R2 UR11"; BREAK }
                                                    "7.1.10226.1304" { $ManagementServerVersion = "2012 R2 UR12"; BREAK }
                                                    "7.1.10226.1360" { $ManagementServerVersion = "2012 R2 UR13"; BREAK }
                                                    "7.1.10226.1387" { $ManagementServerVersion = "2012 R2 UR14"; BREAK }
                                                    # SCOM 2016
                                                    "7.2.11719.0" { $ManagementServerVersion = "2016 RTM"; BREAK }
                                                    "7.2.11759.0" { $ManagementServerVersion = "2016 UR1"; BREAK }
                                                    "7.2.11822.0" { $ManagementServerVersion = "2016 UR2"; BREAK }
                                                    "7.2.11878.0" { $ManagementServerVersion = "2016 UR3"; BREAK }
                                                    "7.2.11938.0" { $ManagementServerVersion = "2016 UR4"; BREAK }
                                                    "7.2.12016.0" { $ManagementServerVersion = "2016 UR5"; BREAK }
                                                    "7.2.12066.0" { $ManagementServerVersion = "2016 UR6"; BREAK }
                                                    "7.2.12150.0" { $ManagementServerVersion = "2016 UR7"; BREAK }
                                                    "7.2.12213.0" { $ManagementServerVersion = "2016 UR8"; BREAK }
                                                    "7.2.12265.0" { $ManagementServerVersion = "2016 UR9"; BREAK }
                                                    "7.2.12324.0" { $ManagementServerVersion = "2016 UR10"; BREAK }
                                                    # SCOM 1801
                                                    "7.3.13142.0" { $ManagementServerVersion = "1801"; BREAK }
                                                    "7.3.13261.0" { $ManagementServerVersion = "1807"; BREAK }
                                                    # SCOM 2019
                                                    "10.19.10050.0" { $ManagementServerVersion = "2019 RTM"; BREAK }
                                                    "10.19.10311.0" { $ManagementServerVersion = "2019 UR1"; BREAK }
                                                    "10.19.10349.0" { $ManagementServerVersion = "2019 UR1 Hotfix"; BREAK }
                                                    "10.19.10407.0" { $ManagementServerVersion = "2019 UR2"; BREAK }
                                                }
                                                # Get CSHostService account.
                                                $ConfigServiceAccount = (Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\cshost").ObjectName
                                                # Get OMSDKService account.
                                                $DataAccessServiceAccount = (Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\OMSDK").ObjectName
                                                # Get ops db name.
                                                $OpsDbName = (Get-ItemProperty -Path $SetupRegKey).DatabaseName
                                                # Get ops db server name.
                                                $OpsDbServer = (Get-ItemProperty -Path $SetupRegKey).DatabaseServerName
                                                # Get data warehouse db name.
                                                $DWDbName = (Get-ItemProperty -Path $SetupRegKey).DataWarehouseDBName
                                                # Get data warehouse db server name.
                                                $DwDbServer = (Get-ItemProperty -Path $SetupRegKey).DataWarehouseDBServerName
                                                # Get RMS owner.
                                                $Connection = New-Object System.Data.SQLClient.SQLConnection
                                                $Query = "SELECT [PrincipalName] FROM [$OpsDbName].[dbo].[MTV_HealthService] WHERE IsRHS='1'"
                                                $Connection.ConnectionString = "Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
                                                $Connection.Open()
                                                $Command = New-Object System.Data.SQLClient.SQLCommand
                                                $Command.Connection = $Connection
                                                $Command.CommandText = $Query
                                                $Reader = $Command.ExecuteReader()
                                                $Datatable = New-Object System.Data.DataTable
                                                $Datatable.Load($Reader)
                                                $RMSFqdn = $Datatable.PrincipalName
                                                $Connection.Close() 
                                                If ($RMSFqdn -eq $ComputerFqdn) {
                                                    $RMS = "Yes"
                                                }
                                                Else {
                                                    $RMS = "No"
                                                }
                                            }
                                            Else {
                                                $ManagementServerInstallDirectory = "n/a"
                                                $ManagementServerVersion = "n/a"
                                                $ConfigServiceAccount = "n/a"
                                                $DataAccessServiceAccount = "n/a"
                                                $OpsDbName = "n/a"
                                                $OpsDbServer = "n/a"
                                                $DWDbName = "n/a"
                                                $DwDbServer = "n/a"
                                                $RMS = "n/a"
                                            }
                                            <#
                                            ACS COLLECTORS. This section only applies to ACS collectors.
                                            #>
                                            $ACSCollectorServiceRegKey = "HKLM:SYSTEM\CurrentControlSet\Services\AdtServer"
                                            If ((Get-ItemProperty -Path $ACSCollectorServiceRegKey -ErrorAction SilentlyContinue).DisplayName) {
                                                $ACSCollectorInstallDirectory = (Get-ItemProperty -Path "$ACSCollectorServiceRegKey\Parameters\").ScriptFilePath.TrimEnd("\")
                                                $ACSCollectorVersion = (Get-Item "$WinDir\System32\Security\AdtServer\OmacAdmn.dll").VersionInfo.FileVersion
                                                Switch ($ACSCollectorVersion) {
                                                    # SCOM 2012 R2
                                                    "7.1.10226.0" { $ACSCollectorVersion = "2012 R2 RTM"; BREAK }
                                                    "7.1.10226.1239" { $ACSCollectorVersion = "2012 R2 UR11"; BREAK }
                                                    "7.1.10226.1304" { $ACSCollectorVersion = "2012 R2 UR12"; BREAK }
                                                    "7.1.10226.1360" { $ACSCollectorVersion = "2012 R2 UR13"; BREAK }
                                                    "7.1.10226.1387" { $ACSCollectorVersion = "2012 R2 UR14"; BREAK }
                                                    # SCOM 2016
                                                    "7.2.11719.0" { $ACSCollectorVersion = "2016 RTM"; BREAK }		
                                                    "7.2.11938.0" { $ACSCollectorVersion = "2016 UR4"; BREAK }		
                                                    "7.2.12016.0" { $ACSCollectorVersion = "2016 UR5"; BREAK }
                                                    "7.2.12066.0" { $ACSCollectorVersion = "2016 UR6"; BREAK }
                                                    "7.2.12150.0" { $ACSCollectorVersion = "2016 UR7"; BREAK }
                                                    "7.2.12213.0" { $ACSCollectorVersion = "2016 UR8"; BREAK }		
                                                    "7.2.12265.0" { $ACSCollectorVersion = "2016 UR9"; BREAK }		
                                                    "7.2.12324.0" { $ACSCollectorVersion = "2016 UR10"; BREAK }
                                                    # SCOM 1801
                                                    "7.3.13142.0" { $ACSCollectorVersion = "1801"; BREAK }		
                                                    "7.3.13261.0" { $ACSCollectorVersion = "1807"; BREAK }	
                                                    # SCOM 2019
                                                    "10.19.10050.0" { $ACSCollectorVersion = "2019 RTM"; BREAK }
                                                    "10.19.10140.0" { $ACSCollectorVersion = "2019 UR1"; BREAK }
                                                }
                                                # Get ACS Collector account.
                                                $ACSCollectorServiceAccount = (Get-ItemProperty -Path $ACSCollectorServiceRegKey).ObjectName
                                            }
                                            Else {
                                                $ACSCollectorInstallDirectory = "n/a"
                                                $ACSCollectorVersion = "n/a"
                                                $ACSCollectorServiceAccount = "n/a"
                                            }
                                            <#
                                            GATEWAY SERVERS. This section only applies to gateway servers.
                                            #>
                                            If ((Get-ItemProperty -Path $SetupRegKey -ErrorAction SilentlyContinue).MOMGatewayVersion) {
                                                $GatewayServerInstallDirectory = (Get-ItemProperty -Path $SetupRegKey).InstallDirectory.TrimEnd("\")
                                                # Get Gateway UR info. Dropped logic for 2012/R2. Need to test 1801-2022.
                                                # If 2016 UR3 has been installed MomWsManModules.dll version is 8.0.10970.0 so check it first. Use HealthService.dll for remaining URs.
                                                $GatewayURFile = (Get-Item "$GatewayServerInstallDirectory\MomWsManModules.dll").VersionInfo.FileVersion
                                                If ($GatewayURFile -eq "8.0.10970.0") {
                                                    $GatewayServerVersion = $GatewayURFile
                                                }
                                                Else {
                                                    $GatewayServerVersion = (Get-Item "$GatewayServerInstallDirectory\HealthService.dll").VersionInfo.FileVersion
                                                }
                                                Switch ($GatewayServerVersion) {
                                                    # SCOM 2012 R2
                                                    "7.1.10184.0" { $GatewayServerVersion = "2012 R2 RTM"; BREAK }
                                                    "7.1.10188.0" { $GatewayServerVersion = "2012 R2 UR1"; BREAK }
                                                    "7.1.10195.0" { $GatewayServerVersion = "2012 R2 UR2"; BREAK }
                                                    "7.1.10204.0" { $GatewayServerVersion = "2012 R2 UR3"; BREAK }
                                                    "7.1.10211.0" { $GatewayServerVersion = "2012 R2 UR4"; BREAK }
                                                    "7.1.10213.0" { $GatewayServerVersion = "2012 R2 UR5"; BREAK }
                                                    "7.1.10218.0" { $GatewayServerVersion = "2012 R2 UR6"; BREAK }
                                                    "7.1.10229.0" { $GatewayServerVersion = "2012 R2 UR7"; BREAK }
                                                    "7.1.10241.0" { $GatewayServerVersion = "2012 R2 UR8"; BREAK }
                                                    "7.1.10268.0" { $GatewayServerVersion = "2012 R2 UR9"; BREAK }
                                                    "7.1.10285.0" { $GatewayServerVersion = "2012 R2 UR11"; BREAK }
                                                    "7.1.10292.0" { $GatewayServerVersion = "2012 R2 UR12"; BREAK }
                                                    "7.1.10302.0" { $GatewayServerVersion = "2012 R2 UR13"; BREAK }
                                                    "7.1.10305.0" { $GatewayServerVersion = "2012 R2 UR14"; BREAK }
                                                    # SCOM 2016
                                                    "8.0.10918.0" { $GatewayServerVersion = "2016 RTM"; BREAK }
                                                    "8.0.10949.0" { $GatewayServerVersion = "2016 UR2"; BREAK }
                                                    "8.0.10970.0" { $GatewayServerVersion = "2016 UR3"; BREAK }
                                                    "8.0.10977.0" { $GatewayServerVersion = "2016 UR4"; BREAK }		
                                                    "8.0.10990.0" { $GatewayServerVersion = "2016 UR5"; BREAK }
                                                    "8.0.11004.0" { $GatewayServerVersion = "2016 UR6"; BREAK }
                                                    "8.0.11025.0" { $GatewayServerVersion = "2016 UR7"; BREAK }
                                                    "8.0.11037.0" { $GatewayServerVersion = "2016 UR8"; BREAK }		
                                                    "8.0.11049.0" { $GatewayServerVersion = "2016 UR9"; BREAK }		
                                                    "8.0.11057.0" { $GatewayServerVersion = "2016 UR10"; BREAK }
                                                    # SCOM 1801
                                                    "8.0.13053.0" { $GatewayServerVersion = "1801"; BREAK }		
                                                    "7.3.13261.0" { $GatewayServerVersion = "1807"; BREAK } # This is the correct version even though the number is older.
                                                    # SCOM 2019
                                                    "10.19.10014.0" { $GatewayServerVersion = "2019 RTM"; BREAK }
                                                    "10.19.10140.0" { $GatewayServerVersion = "2019 UR1"; BREAK }
                                                    "10.19.10153.0" { $GatewayServerVersion = "2019 UR2"; BREAK }
                                                }
                                            }
                                            Else {
                                                $GatewayServerInstallDirectory = "n/a"
                                                $GatewayServerVersion = "n/a"
                                            }
                                            <#
                                            WEB CONSOLE SERVER. This section only applies to web console servers.
                                            #>
                                            $WebConsoleRegKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\WebConsole"
                                            If ((Get-ItemProperty -Path $WebConsoleRegKey -ErrorAction SilentlyContinue).WEB_CONSOLE_URL) {
                                                $WebConsoleInstallDirectory = (Get-ItemProperty -Path $WebConsoleRegKey).InstallDirectory.TrimEnd("\")
                                                # Is SCOM 2016 CVE-2020-1331 hotfix installed?
                                                $WebConsoleHotFixFile = (Get-Item "$WebConsoleInstallDirectory\MonitoringView\bin\Microsoft.EnterpriseManagement.OperationsManager.MonitoringViews.dll").VersionInfo.FileVersion
                                                    If ($WebConsoleHotFixFile -eq "7.2.12282.0") {
                                                        $WebConsoleHotFixInstalled = "(Hotfix CVE-2020-1331 installed)"
                                                    }
                                                    Else {
                                                        $WebConsoleHotFixInstalled = "(Hotfix CVE-2020-1331 not installed)"
                                                    }
                                                # Get web console UR file info. Note there are different files for different versions.
                                                # Best UR file for 2012 R2.
                                                If (Test-Path "$WebConsoleInstallDirectory\WebHost\bin\Microsoft.EnterpriseManagement.Management.DataProviders.dll") {
                                                    $WebConsoleURFile = (Get-Item "$WebConsoleInstallDirectory\WebHost\bin\Microsoft.EnterpriseManagement.Management.DataProviders.dll").VersionInfo.FileVersion
                                                    If ($WebConsoleURFile -match "7.1.1") {
                                                        $WebConsoleVersion = $WebConsoleURFile
                                                    }
                                                }
                                                # Best UR file for 2016.
                                                If (Test-Path "$WebConsoleInstallDirectory\WebHost\bin\Microsoft.EnterpriseManagement.Monitoring.DataProviders.dll") {
                                                    $WebConsoleURFile = (Get-Item "$WebConsoleInstallDirectory\WebHost\bin\Microsoft.EnterpriseManagement.Monitoring.DataProviders.dll").VersionInfo.FileVersion
                                                    If ($WebConsoleURFile -match "7.2.1") {
                                                        $WebConsoleVersion = $WebConsoleURFile
                                                    }
                                                }
                                                # Best UR file for 1801.
                                                If (Test-Path "$WebConsoleInstallDirectory\WebHost\bin\Microsoft.Mom.Common.dll") {
                                                    $WebConsoleURFile = (Get-Item "$WebConsoleInstallDirectory\WebHost\bin\Microsoft.Mom.Common.dll").VersionInfo.FileVersion
                                                    If ($WebConsoleURFile -match "7.3.1") {
                                                        $WebConsoleVersion = $WebConsoleURFile
                                                    }
                                                }
                                                # Best UR file for 2019.
                                                If (Test-Path "$WebConsoleInstallDirectory\Dashboard\bin\Microsoft.EnterpriseManagement.OMDataService.dll") {
                                                    $WebConsoleURFile = (Get-Item "$WebConsoleInstallDirectory\Dashboard\bin\Microsoft.EnterpriseManagement.OMDataService.dll").VersionInfo.FileVersion
                                                    If ($WebConsoleURFile -match "10.19") {
                                                        $WebConsoleVersion = $WebConsoleURFile
                                                    }
                                                }
                                                Switch ($WebConsoleVersion) {
                                                    # SCOM 2012 R2
                                                    "7.1.10226.0" { $WebConsoleVersion = "2012 R2 RTM"; BREAK }
                                                    "7.1.10226.1009" { $WebConsoleVersion = "2012 R2 UR1"; BREAK }
                                                    "7.1.10226.1015" { $WebConsoleVersion = "2012 R2 UR2"; BREAK }
                                                    "7.1.10226.1037" { $WebConsoleVersion = "2012 R2 UR3"; BREAK }
                                                    "7.1.10226.1046" { $WebConsoleVersion = "2012 R2 UR4"; BREAK }
                                                    "7.1.10226.1052" { $WebConsoleVersion = "2012 R2 UR5"; BREAK }
                                                    "7.1.10226.1064" { $WebConsoleVersion = "2012 R2 UR6"; BREAK }
                                                    "7.1.10226.1090" { $WebConsoleVersion = "2012 R2 UR7"; BREAK }
                                                    "7.1.10226.1118" { $WebConsoleVersion = "2012 R2 UR8"; BREAK }
                                                    "7.1.10226.1177" { $WebConsoleVersion = "2012 R2 UR9"; BREAK }
                                                    "7.1.10226.1239" { $WebConsoleVersion = "2012 R2 UR11"; BREAK }
                                                    "7.1.10226.1304" { $WebConsoleVersion = "2012 R2 UR12"; BREAK }
                                                    "7.1.10226.1360" { $WebConsoleVersion = "2012 R2 UR13"; BREAK }
                                                    "7.1.10226.1387" { $WebConsoleVersion = "2012 R2 UR14"; BREAK }
                                                    # SCOM 2016
                                                    "7.2.11719.0" { $WebConsoleVersion = "2016 RTM $WebConsoleHotFixInstalled"; BREAK }
                                                    "7.2.11759.0" { $WebConsoleVersion = "2016 UR1 $WebConsoleHotFixInstalled"; BREAK }
                                                    "7.2.11822.0" { $WebConsoleVersion = "2016 UR2 $WebConsoleHotFixInstalled"; BREAK }
                                                    "7.2.11878.0" { $WebConsoleVersion = "2016 UR3 $WebConsoleHotFixInstalled"; BREAK }
                                                    "7.2.11938.0" { $WebConsoleVersion = "2016 UR4 $WebConsoleHotFixInstalled"; BREAK }		
                                                    "7.2.12016.0" { $WebConsoleVersion = "2016 UR5 $WebConsoleHotFixInstalled"; BREAK }
                                                    "7.2.12066.0" { $WebConsoleVersion = "2016 UR6 $WebConsoleHotFixInstalled"; BREAK }
                                                    "7.2.12150.0" { $WebConsoleVersion = "2016 UR7 $WebConsoleHotFixInstalled"; BREAK }
                                                    "7.2.12213.0" { $WebConsoleVersion = "2016 UR8 $WebConsoleHotFixInstalled"; BREAK }		
                                                    "7.2.12265.0" { $WebConsoleVersion = "2016 UR9 $WebConsoleHotFixInstalled"; BREAK }		
                                                    "7.2.12324.0" { $WebConsoleVersion = "2016 UR10 $WebConsoleHotFixInstalled"; BREAK }
                                                    # SCOM 1801
                                                    "7.3.13142.0" { $WebConsoleVersion = "1801"; BREAK }		
                                                    "7.3.13261.0" { $WebConsoleVersion = "7.3.13261.0 (1807"; BREAK } # this is how we id the 1807 patch on a web server.
                                                    # SCOM 2019
                                                    "10.19.10050.0" { $WebConsoleVersion = "2019 RTM"; BREAK }
                                                    "10.19.10311.0" { $WebConsoleVersion = "2019 UR1"; BREAK }
                                                    "10.19.10349.0" { $WebConsoleVersion = "2019 UR1 Hotfix"; BREAK }
                                                    "10.19.10407.0" { $WebConsoleVersion = "2019 UR2"; BREAK }
                                                }
                                                # Get Authentication Mode.
                                                $AuthenticationMode = (Get-ItemProperty -Path $WebConsoleRegKey).AUTHENTICATION_MODE
                                                # Get DefaultServer.
                                                $DefaultServer = (Get-ItemProperty -Path $WebConsoleRegKey).DEFAULT_SERVER
                                                # Get WebConsoleUrl.
                                                $WebConsoleUrl = (Get-ItemProperty -Path $WebConsoleRegKey).WEB_CONSOLE_URL
                                                # Get ApmAdvisorUrl.
                                                $ApmAdvisorUrl = (Get-ItemProperty -Path $WebConsoleRegKey).APM_ADVISOR_URL
                                                # Get ApmDiagnosticsUrl.
                                                $ApmDiagnosticsUrl = (Get-ItemProperty -Path $WebConsoleRegKey).APM_DIAGNOSTICS_URL
                                            }
                                            Else {
                                                $WebConsoleInstallDirectory = "n/a"
                                                $WebConsoleVersion = "n/a"
                                                $AuthenticationMode = "n/a"
                                                $DefaultServer = "n/a"
                                                $WebConsoleUrl = "n/a"
                                                $ApmAdvisorUrl = "n/a"
                                                $ApmDiagnosticsUrl = "n/a"
                                            }
                                            <#
                                            REPORT SERVER. This section only applies to report servers.

                                            *** This stuff is tricky to get. Best option is to have a section for each version. Don't
                                            worry about repeated code, can fix later. ***
                                            #>
                                            $ReportServerRegKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Reporting"
                                            If ((Get-ItemProperty -Path $ReportServerRegKey -ErrorAction SilentlyContinue).InstallDirectory) {
                                                $ReportServerInstallDirectory = (Get-ItemProperty -Path $ReportServerRegKey).InstallDirectory.TrimEnd("\")
                                                
                                                
                                                
                                                # 2016, 1801.
                                                If (Test-Path "$ReportServerInstallDirectory\Microsoft.Mom.Common.dll") {
                                                    $ReportServerURFile = (Get-Item "$ReportServerInstallDirectory\Microsoft.Mom.Common.dll").VersionInfo.FileVersion
                                                    If (($ReportServerURFile -match "7.2.1") -or ($Script:FileVersion -match "7.3.1" )) {
                                                        $ReportServerURFile = (Get-Item "C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.EnterpriseManagement.OperationsManager\v4.0_7.0.5000.0__31bf3856ad364e35\Microsoft.EnterpriseManagement.OperationsManager.dll").VersionInfo.FileVersion
                                                    }
                                                }

                                                <# 2019.
                                                
                                                RTM.
                                                These files exist and all are version 10.19.10050.0.
                                                C:\Program Files\Microsoft System Center\Operations Manager\Reporting\Microsoft.Mom.Common.dll
                                                C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.EnterpriseManagement.OperationsManager\v4.0_7.0.5000.0__31bf3856ad364e35\Microsoft.EnterpriseManagement.OperationsManager.dll
                                                C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.EnterpriseManagement.Runtime\v4.0_7.0.5000.0__31bf3856ad364e35
                                                

                                                UR1.
                                                These are the only patch files for reporting:
                                                Microsoft.EnterpriseManagement.OperationsManager.dll
                                                Microsoft.EnterpriseManagement.Runtime.dll

                                                UR1Hotfix

                                                C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.EnterpriseManagement.Core\v4.0_7.0.5000.0__31bf3856ad364e35\Microsoft.EnterpriseManagement.Core.dll

                                                #>



                                                $ReportServerVersion = $ReportServerURFile
                                                Switch ($ReportServerVersion) {
                                                    # SCOM 2012 R2
                                                    "7.1.10226.0" { $ReportServerVersion = "2012 R2 RTM"; BREAK }
                                                    "7.1.10226.1304" { $ReportServerVersion = "2012 R2 UR12"; BREAK }
                                                    "7.1.10226.1360" { $ReportServerVersion = "2012 R2 UR13"; BREAK }
                                                    "7.1.10226.1387" { $ReportServerVersion = "2012 R2 UR14"; BREAK }
                                                    # SCOM 2016
                                                    "7.2.11719.0" { $ReportServerVersion = "2016 RTM"; BREAK }
                                                    "7.2.12016.0" { $ReportServerVersion = "2016 UR5"; BREAK }
                                                    "7.2.12066.0" { $ReportServerVersion = "2016 UR6"; BREAK }
                                                    "7.2.12150.0" { $ReportServerVersion = "2016 UR7"; BREAK }
                                                    "7.2.12213.0" { $ReportServerVersion = "2016 UR8"; BREAK }		
                                                    "7.2.12265.0" { $ReportServerVersion = "2016 UR9"; BREAK }		
                                                    "7.2.12324.0" { $ReportServerVersion = "2016 UR10"; BREAK }
                                                    # SCOM 1801
                                                    "7.3.13142.0" { $ReportServerVersion = "1801"; BREAK }		
                                                    "7.3.13261.0" { $ReportServerVersion = "1807"; BREAK }	
                                                    # SCOM 2019
                                                    "10.19.10050.0" { $ReportServerVersion = "2019 RTM"; BREAK }
                                                    "10.19.10311.0" { $ReportServerVersion = "2019 UR1"; BREAK }
                                                    "10.19.1035.82" { $ReportServerVersion = "2019 UR1 Hotfix"; BREAK }
                                                    "10.19.1035.100" { $ReportServerVersion = "2019 UR2"; BREAK } # Microsoft.EnterpriseManagement.Core.dll. Adding 2 values for UR2 in case date compare gets weird.
                                                    "10.19.10407.0" { $ReportServerVersion = "2019 UR2"; BREAK } # Microsoft.EnterpriseManagement.OperationsManager.dll.
                                                }
                                                # Get ReportServerDwDbServer.
                                                $ReportServerDwDbServer = (Get-ItemProperty -Path $ReportServerRegKey\..\..\Reporting).DWDBInstance
                                                # Get ReportServerDWDBName.
                                                $ReportServerDWDBName = (Get-ItemProperty -Path $ReportServerRegKey\..\..\Reporting).DWDBName
                                                # Get ReportServerUrl.
                                                $ReportServerUrl = (Get-ItemProperty -Path $ReportServerRegKey\..\..\Reporting).ReportingServerUrl
                                                #Get SRSInstance.
                                                $SRSInstance = (Get-ItemProperty -Path $ReportServerRegKey\..\..\Reporting).SRSInstance
                                                <# Get report service account. Using the registry to get report server service info is unreliable because info returned by different SQL versions and named instances is inconsistent.
                                                #>
                                                $ReportServerService = Get-WmiObject Win32_Service -Filter "DisplayName like 'SQL Server Reporting Services%'" # Confirmed this works on SQL 2012SP4, 2017.
                                                $ReportServerServiceAccount = $ReportServerService.StartName
                                            }
                                            Else {
                                                $ReportServerInstallDirectory = "n/a"
                                                $ReportServerVersion = "n/a"
                                                $ReportServerDwDbServer = "n/a"
                                                $ReportServerDWDBName = "n/a"
                                                $ReportServerUrl = "n/a"
                                                $SRSInstance = "n/a"
                                                $ReportServerServiceAccount = "n/a"
                                            }
                                            <#
                                            CONSOLES. This section only applies to operations manager consoles.
                                            #>
                                            $ConsoleRegKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Console"
                                            If ((Get-ItemProperty -Path $ConsoleRegKey -ErrorAction SilentlyContinue).InstallDirectory) {
                                                $ConsoleInstallDirectory = (Get-ItemProperty -Path $ConsoleRegKey).InstallDirectory.TrimEnd("\")
                                                $ConsoleVersion = (Get-Item "$ConsoleInstallDirectory\Tools\TMF\OMTraceTMFVer.Dll").VersionInfo.FileVersion
                                                Switch ($ConsoleVersion) {
                                                    # SCOM 2012
                                                    "7.0.9538.0" { $ConsoleVersion = "2012 SP1"; BREAK }
                                                    # SCOM 2012 R2
                                                    "7.1.10226.0" { $ConsoleVersion = "2012 R2 RTM"; BREAK }
                                                    "7.1.10226.1009" { $ConsoleVersion = "2012 R2 UR1"; BREAK }
                                                    "7.1.10226.1015" { $ConsoleVersion = "2012 R2 UR2"; BREAK }
                                                    "7.1.10226.1037" { $ConsoleVersion = "2012 R2 UR3"; BREAK }
                                                    "7.1.10226.1046" { $ConsoleVersion = "2012 R2 UR4"; BREAK }
                                                    "7.1.10226.1064" { $ConsoleVersion = "2012 R2 UR6"; BREAK }
                                                    "7.1.10226.1090" { $ConsoleVersion = "2012 R2 UR7"; BREAK }
                                                    "7.1.10226.1118" { $ConsoleVersion = "2012 R2 UR8"; BREAK }
                                                    "7.1.10226.1177" { $ConsoleVersion = "2012 R2 UR9"; BREAK }
                                                    "7.1.10226.1239" { $ConsoleVersion = "2012 R2 UR11"; BREAK }
                                                    "7.1.10226.1304" { $ConsoleVersion = "2012 R2 UR12"; BREAK }
                                                    "7.1.10226.1360" { $ConsoleVersion = "2012 R2 UR13"; BREAK }
                                                    "7.1.10226.1387" { $ConsoleVersion = "2012 R2 UR14"; BREAK }
                                                    # SCOM 2016
                                                    "7.2.11719.0" { $ConsoleVersion = "2016 RTM"; BREAK }
                                                    "7.2.11759.0" { $ConsoleVersion = "2016 UR1"; BREAK }
                                                    "7.2.11822.0" { $ConsoleVersion = "2016 UR2"; BREAK }
                                                    "7.2.11878.0" { $ConsoleVersion = "2016 UR3"; BREAK }
                                                    "7.2.11938.0" { $ConsoleVersion = "2016 UR4"; BREAK }		
                                                    "7.2.12016.0" { $ConsoleVersion = "2016 UR5"; BREAK }
                                                    "7.2.12066.0" { $ConsoleVersion = "2016 UR6"; BREAK }
                                                    "7.2.12150.0" { $ConsoleVersion = "2016 UR7"; BREAK }
                                                    "7.2.12213.0" { $ConsoleVersion = "2016 UR8"; BREAK }		
                                                    "7.2.12265.0" { $ConsoleVersion = "2016 UR9"; BREAK }		
                                                    "7.2.12324.0" { $ConsoleVersion = "2016 UR10"; BREAK }
                                                    # SCOM 1801
                                                    "7.3.13142.0" { $ConsoleVersion = "1801"; BREAK }		
                                                    "7.3.13261.0" { $ConsoleVersion = "1807"; BREAK }	
                                                    # SCOM 2019
                                                    "10.19.10050.0" { $ConsoleVersion = "2019 RTM"; BREAK }
                                                    "10.19.10311.0" { $ConsoleVersion = "2019 UR1"; BREAK }
                                                    "10.19.10349.0" { $ConsoleVersion = "2019 UR1 Hotfix"; BREAK }
                                                    "10.19.10407.0" { $ConsoleVersion = "2019 UR2"; BREAK }
                                                }
                                            }
                                            Else {
                                                $ConsoleInstallDirectory = "n/a"
                                                $ConsoleVersion = "n/a"
                                            }
                                            <# FOR TESTING
                                            write-host "PrincipalName: $ComputerName"
                                            write-host "ComputerType: $ComputerType"
                                            write-host "OperatingSystem: $OperatingSystem"
                                            write-host "Product: $Product"
                                            write-host "AgentInstallDirectory: $AgentInstallDirectory"
                                            write-host "AgentVersion: $AgentVersion"
                                            write-host "ManagementGroups: $ManagementGroups"
                                            write-host "HealthServiceAccount: $HealthServiceAccount"
                                            write-host "CertificateExpiry: $CertificateExpiry"
                                            write-host "ADIntegration: $ADIntegration"
                                            write-host "APMServiceStartMode: $APMServiceStartMode"
                                            write-host "ACSForwarderServiceStartMode: $ACSForwarderServiceStartMode"
                                            write-host "LogAnalyticsWorkspaces: $LogAnalyticsWorkspaces"
                                            write-host "ManagementServerInstallDirectory: $ManagementServerInstallDirectory"
                                            write-host "ManagementServerVersion: $ManagementServerVersion"
                                            write-host "ConfigServiceAccount: $ConfigServiceAccount"
                                            write-host "DataAccessServiceAccount: $DataAccessServiceAccount"
                                            write-host "OpsDbName: $OpsDbName"
                                            write-host "OpsDbServer: $OpsDbServer"
                                            write-host "DWDbName: $DWDbName"
                                            write-host "DwDbServer: $DwDbServer"
                                            write-host "ACSCollectorInstallDirectory: $ACSCollectorInstallDirectory"
                                            write-host "ACSCollectorVersion: $ACSCollectorVersion"
                                            write-host "ACSCollectorServiceAccount: $ACSCollectorServiceAccount"
                                            write-host "RMS: $RMS"
                                            write-host "GatewayServerInstallDirectory: $GatewayServerInstallDirectory"
                                            write-host "GatewayServerVersion: $GatewayServerVersion"
                                            write-host "WebConsoleInstallDirectory: $WebConsoleInstallDirectory"
                                            write-host "WebConsoleVersion: $WebConsoleVersion"
                                            write-host "AuthenticationMode: $AuthenticationMode"
                                            write-host "DefaultServer: $DefaultServer"
                                            write-host "WebConsoleUrl: $WebConsoleUrl"
                                            write-host "ApmAdvisorUrl: $ApmAdvisorUrl"
                                            write-host "ApmDiagnosticsUrl: $ApmDiagnosticsUrl"
                                            write-host "ReportServerInstallDirectory: $ReportServerInstallDirectory"
                                            write-host "ReportServerVersion: $ReportServerVersion"
                                            write-host "ReportServerDwDbServer: $ReportServerDwDbServer"
                                            write-host "ReportServerDWDBName: $ReportServerDWDBName"
                                            write-host "ReportServerUrl: $ReportServerUrl"
                                            write-host "SRSInstance: $SRSInstance"
                                            write-host "ReportServerServiceAccount: $ReportServerServiceAccount"
                                            write-host "ConsoleInstallDirectory: $ConsoleInstallDirectory"
                                            write-host "ConsoleVersion: $ConsoleVersion"
                                            write-host "DisplayName: $ComputerName"
                                            #>
                                            # Return discovery data.
                                            $Instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']$")
                                            $Instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ComputerType$", $ComputerType)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/OperatingSystem$", $OperatingSystem)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/Product$", $Product)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/AgentInstallDirectory$", $AgentInstallDirectory)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/AgentVersion$", $AgentVersion)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ManagementGroups$", $ManagementGroups)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/HealthServiceAccount$", $HealthServiceAccount)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/CertificateExpiry$", $CertificateExpiry)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ADIntegration$", $ADIntegration)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/APMServiceStartMode$", $APMServiceStartMode)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ACSForwarderServiceStartMode$", $ACSForwarderServiceStartMode)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/LogAnalyticsWorkspaces$", $LogAnalyticsWorkspaces)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ManagementServerInstallDirectory$", $ManagementServerInstallDirectory)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ManagementServerVersion$", $ManagementServerVersion)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ConfigServiceAccount$", $ConfigServiceAccount)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/DataAccessServiceAccount$", $DataAccessServiceAccount)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/OpsDbName$", $OpsDbName)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/OpsDbServer$", $OpsDbServer)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/DWDbName$", $DWDbName)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/DwDbServer$", $DwDbServer)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ACSCollectorInstallDirectory$", $ACSCollectorInstallDirectory)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ACSCollectorVersion$", $ACSCollectorVersion)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ACSCollectorServiceAccount$", $ACSCollectorServiceAccount)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/RMS$", $RMS)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/GatewayServerInstallDirectory$", $GatewayServerInstallDirectory)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/GatewayServerVersion$", $GatewayServerVersion)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/WebConsoleInstallDirectory$", $WebConsoleInstallDirectory)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/WebConsoleVersion$", $WebConsoleVersion)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/AuthenticationMode$", $AuthenticationMode)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/DefaultServer$", $DefaultServer)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/WebConsoleUrl$", $WebConsoleUrl)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ApmAdvisorUrl$", $ApmAdvisorUrl)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ApmDiagnosticsUrl$", $ApmDiagnosticsUrl)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ReportServerInstallDirectory$", $ReportServerInstallDirectory)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ReportServerVersion$", $ReportServerVersion)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ReportServerDwDbServer$", $ReportServerDwDbServer)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ReportServerDWDBName$", $ReportServerDWDBName)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ReportServerUrl$", $ReportServerUrl)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/SRSInstance$", $SRSInstance)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ReportServerServiceAccount$", $ReportServerServiceAccount)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ConsoleInstallDirectory$", $ConsoleInstallDirectory)
                                            $Instance.AddProperty("$MPElement[Name='Microsoft.SCOM.UpdateRollup.Class.WindowsComputer']/ConsoleVersion$", $ConsoleVersion)
                                            $Instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ComputerName)
                                            $DiscoveryData.AddInstance($Instance)
                                            # Submit discovery data back to Operations Manager and complete the script.
                                            $DiscoveryData
                                            <# FOR TESTING
                                            $MomApi.Return($DiscoveryData)
                                            #>
                                            Write-Log -ScriptState $ScriptState
                                        }
                                        Catch {
                                            $ScriptState = "Warning"
                                            $Message += $_.Exception.Message
                                            Write-Log -ScriptState $ScriptState 
                                        }
                                    }
                                    # Declare all constants used by the script`
                                    [datetime]$StartTime = Get-Date
                                    $MomApi = New-Object -comObject 'MOM.ScriptAPI'
                                    $ScriptName = "GetWindowsURInfo.ps1"
                                    $Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
                                    $Mp = "Microsoft.SCOM.UpdateRollup.Monitoring"
                                    $MpVersion = "2025.1.28.0"
                                    $MpWorkflow = "Microsoft.SCOM.UpdateRollup.Discovery.WindowsComputer"
                                    Get-URInfo -SourceId $SourceId -ManagedEntityId $ManagedEntityId -ComputerName $ComputerName
                                ]]>
                                </ScriptBody>
                                <Parameters>
                                    <Parameter>
                                        <Name>SourceId</Name>
                                        <Value>$MPElement$</Value>
                                    </Parameter>
                                    <Parameter>
                                        <Name>ManagedEntityId</Name>
                                        <Value>$Target/Id$</Value>
                                    </Parameter>
                                    <Parameter>
                                        <Name>ComputerName</Name>
                                        <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
                                    </Parameter>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </DataSource>
                        </MemberModules>
                        <Composition>
                            <Node ID="DS" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.Discovery.Data</OutputType>
            </DataSourceModuleType>
            <DataSourceModuleType ID="Microsoft.SCOM.UpdateRollup.DataSource.ManagementGroupReport" Accessibility="Public" Batching="false">
                <Configuration>
                    <IncludeSchemaTypes>
                        <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
                    </IncludeSchemaTypes>
                    <xsd:element name="IntervalSeconds" type="xsd:int"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element name="SyncTime" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
                    <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <DataSource ID="DS" TypeID="System!System.Scheduler">
                                <Scheduler>
                                    <SimpleReccuringSchedule>
                                        <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                                        <SyncTime>$Config/SyncTime$</SyncTime>
                                    </SimpleReccuringSchedule>
                                    <ExcludeDates />
                                </Scheduler>
                            </DataSource>
                        </MemberModules>
                        <Composition>
                            <Node ID="DS" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.TriggerData</OutputType>
            </DataSourceModuleType>
            <DataSourceModuleType ID="Microsoft.SCOM.UpdateRollup.DataSource.ManagementPackBackup" Accessibility="Public" Batching="false">
                <Configuration>
                    <IncludeSchemaTypes>
                        <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
                    </IncludeSchemaTypes>
                    <xsd:element name="IntervalSeconds" type="xsd:int"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element name="SyncTime" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
                    <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <DataSource ID="DS" TypeID="System!System.Scheduler">
                                <Scheduler>
                                    <SimpleReccuringSchedule>
                                        <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                                        <SyncTime>$Config/SyncTime$</SyncTime>
                                    </SimpleReccuringSchedule>
                                    <ExcludeDates />
                                </Scheduler>
                            </DataSource>
                        </MemberModules>
                        <Composition>
                            <Node ID="DS" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.TriggerData</OutputType>
            </DataSourceModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.RunCommand" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="RunCommand" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="RunCommand" Selector="$Config/RunCommand$" ParameterType="string" />
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>SCOM.RunCommand.ps1</ScriptName>
                                <ScriptBody><![CDATA[
Param ($RunCommand)
$ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
Write-Host "====================================="
Write-Host "Task: Run command"
Write-Host "Computer: $ComputerFqdn"
Write-Host "====================================="
Write-Host
If ([string]::IsNullOrEmpty($RunCommand)) {
    Write-Host "Command entered: Enter a command to run."
}
else {
    $Output = cmd /c $RunCommand
    Write-Host "Command entered: $RunCommand"
    Write-Host "Command output below:"
    Write-Host
    $Output
}
]]>
                                </ScriptBody>
                                <Parameters>
                                    <Parameter>
                                        <Name>RunCommand</Name>
                                        <Value>$Config/RunCommand$</Value>
                                    </Parameter>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="PSWA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.RemoveManagementGroup" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="ManagementGroups" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema"/>
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema"/>
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="ManagementGroups" Selector="$Config/ManagementGroups$" ParameterType="string"/>
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int"/>
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>SCOM.RemoveMgmtGroup.ps1</ScriptName>
                                <ScriptBody>
                                    <![CDATA[
Param($ManagementGroups)
Function Quit {
    $Global:Output
}
Function RemoveItem {
    Param($Item, $ItemType)
    Try {
        If (Test-Path -Path $Item) {
            Remove-Item -Path $Item -Recurse -Force
            $Global:Output += "[INFO] Removed $ItemType $Item`n"
        }
    }
    Catch {
        "[ERROR]" + $_.Exception.Message
    }
}
Function RunScript {
    Try {
        $ErrorActionPreference = "Continue" $ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
        $PSVersion = $PSVersionTable.PSVersion
        $PSMajor = $PSVersion.Major
        $PSMinor = $PSVersion.Minor
        $PSVersion = "$PSMajor.$PSMinor" [int]$Count = 0
        $Global:Output += "Task: Remove management group`n" $Global:Output += "Computer: $ComputerFqdn`n" $Global:Output += "PowerShell Version: $PSVersion`n`n"
        If ([string]::IsNullOrEmpty($ManagementGroups)) {
            $Global:Output += "[WARNING] Missing parameter. Enter a comma separated list of management groups to remove.`n"
            Quit
        }
        else {
            $ObjAgentConfig = New-Object -ComObject AgentConfigManager.MgmtSvcCfg
            $RestartHealthService = $null
            $SetupRegKey = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
            If ($SetupRegKey.MOMGatewayVersion) {
                $Global:Output += "[WARNING] This script cannot run on gateway servers."
            }
            ElseIf ($SetupRegKey.ServerVersion) {
                $Global:Output += "[WARNING] This script cannot run on management servers."
            }
            Else {
                # Remove management group.
                $MgmtGroups = $ObjAgentConfig.GetManagementGroups() | select managementGroupName
                $ManagementGroups = $ManagementGroups.Split(",")
                $ManagementGroups | ForEach-Object {
                    $MGName = $_
                    foreach ($i in $MgmtGroups) {
                        # Had to do it this way because PowerShell v2 can't read the array using 'select-string -inputobject'.
                        If ($MGName -eq $i.managementGroupName) {
                            $Count += 1
                            $ObjAgentConfig.RemoveManagementGroup("$MGName")
                            $Global:Output += "[INFO] Removed management group '$MGName' from Control Panel applet.`n" $RestartHealthService = "Yes"
                        }
                    } }
                # Bounce HealthService. Need to do this before removing folders/reg key otherwise it re-creates them.
                If ($RestartHealthService -eq "Yes") {
                    $Global:Output += "[INFO] Restarting HealthService.`n" $Command = "Restart-Service HealthService"
                    $processInfo = ([wmiclass]"root\cimv2:Win32_ProcessStartup").CreateInstance()
                    $processInfo.ShowWindow = 0
                    $processInfo.CreateFlags = 16777216
                    ([wmiclass]"root\cimv2:Win32_Process").Create("powershell.exe $Command") | out-null
                }
                # Folder/reg clean up bit.
                $ManagementGroups | ForEach-Object {
                    $MGName = $_
                    $InstallDirectory = $SetupRegKey.InstallDirectory
                    $MGNameFolder = "$InstallDirectory`Health Service State\Connector Configuration Cache\$MGName" $MGNameReg = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups\$MGName"
                    RemoveItem -Item $MGNameFolder -ItemType "folder"
                    RemoveItem -Item $MGNameReg -ItemType "reg key"
                }
                $Global:Output += "[INFO] End of script. $Count management group(s) removed."
            }
            Quit
        }
    }
    Catch {
        "[ERROR] " + $_.Exception.Message
    }
}
RunScript -ManagementGroups $ManagementGroups
]]>
                                </ScriptBody>
                                <Parameters>
                                    <Parameter>
                                        <Name>ManagementGroups</Name>
                                        <Value>$Config/ManagementGroups$</Value>
                                    </Parameter>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="PSWA"/>
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.DailyReport" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="EmailFromAddress" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="EmailToAddress" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="EmailServer" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="EmailPort" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="Identifier" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="EmailFromAddress" Selector="$Config/EmailFromAddress$" ParameterType="string" />
                    <OverrideableParameter ID="EmailToAddress" Selector="$Config/EmailToAddress$" ParameterType="string" />
                    <OverrideableParameter ID="EmailServer" Selector="$Config/EmailServer$" ParameterType="string" />
                    <OverrideableParameter ID="EmailPort" Selector="$Config/EmailPort$" ParameterType="string" />
                    <OverrideableParameter ID="Identifier" Selector="$Config/Identifier$" ParameterType="string" />
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>SCOM.DailyReport.ps1</ScriptName>
                                <ScriptBody><![CDATA[
Param ($EmailFromAddress, $EmailToAddress, $EmailServer, $EmailPort, $Identifier)
$Global:Name
$Global:Alert_Count
$Global:Alerts
$Global:EmailBody
$Global:EmailFromAddress
$Global:EmailToAddress
$Global:EmailServer
$Global:EmailPort
$Global:Identifier
<#**************************************** FUNCTION: SendEmail ****************************************#>
Function SendEmail ($EmailFromAddress, $EmailToAddress, $EmailServer, $EmailPort) {
    [string[]]$EmailToAddress = $EmailToAddress.split(',') # need this so we can send to multiple users.
    Send-MailMessage -From $EmailFromAddress -To $EmailToAddress -Subject "$Identifier - SCOM Daily Report [SEC=OFFICIAL:Sensitive]" -Body "$EmailBody" -BodyAsHtml -SmtpServer $EmailServer -Port $EmailPort
}
<#**************************************** FUNCTION: LogAndQuit ****************************************#>
Function LogAndQuit {
    If ($Script:CountError -gt 0) {
        $EventId = 17620 # error
        $EventLevel = 2
    }
    Else {
        $Script:CountError = 0 # If no errors set this value so it appears in the event.
        $EventId = 17619 # success
        $EventLevel = 0
    }
    # Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
    $ObjMomApi.LogScriptEvent("SCOM.DailyReport.ps1", $EventId, $EventLevel, "Daily report script executed.`nWorkflow Name: Microsoft.SCOM.UpdateRollup.Rule.DailyReport`nManagement Pack: Microsoft.SCOM.UpdateRollup.Monitoring (2025.1.28.0)`nPowerShell Version: $PSVersion`nIssues Detected: $Script:CountError`n$Script:Message") # $Error dumps errors into the event.
}
<#**************************************** FUNCTION: TerminatingError ****************************************#>
Function TerminatingError {
    $script:CountError += 1
    $script:Message += "[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ").`n"
    LogAndQuit
}
<#**************************************** FUNCTION: SQLQuery ****************************************#>
Function SQLQuery ($Script:DbServer, $Script:DbName, $Script:DbQuery) {
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$DbServer;Database=$DbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $Script:Datatable = New-Object System.Data.DataTable
    $Script:Datatable.Load($Reader)
    $Connection.Close() 
}
<#**************************************** FUNCTION: DailyReport ****************************************#>
Function DailyReport {
    $ErrorActionPreference = "SilentlyContinue"
    Try {
        <# FOR TESTING
$Error.Clear()
$EmailFromAddress="add_address" $EmailToAddress="add_address" $EmailServer="add_server" $EmailPort="add_port" $Identifier="add_Identifier"
#>
        <# CODE_SECTION_1
Load things we'll need.
#>
        $CodeSection = "1" $Start = (Get-Date -format f)
        # ? $User=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
        $ObjMomApi = New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup" # Get db info so we can connect.
        $Script:OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $Script:OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $Script:DWDbName = (Get-ItemProperty $SetupRegKey).DataWarehouseDBName
        $Script:DwDbServer = (Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
        <# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
        $CodeSection = "2" $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        <# CODE_SECTION_3
17.12.2021 - Not using this.
Set common variables.
$CodeSection="3" $ComputerFqdn=([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
#>
        <# CODE_SECTION_4
17.12.2021 - Not using this.
Load SCOM module.
$CodeSection="4" $PowerShellInstallDirectory=(Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2").InstallDirectory
Import-module $PowerShellInstallDirectory`OperationsManager
New-DefaultManagementGroupConnection
$MgName=(Get-SCOMManagementGroup).Name
#>
        <# CODE_SECTION_5
Build html/css for report.
#>
        $CodeSection = "5" $Head = @"
<style>
h1 {
font-size: 30px;
color: #34568B;
}
h2 {
font-size: 20px;
color: #34568B;
}
h3 {
font-size: 15px;
color: #34568B;
}
h4 {
font-size: 12px;
color: #34568B;
}
h1, h2, h3, h4 { /*common settings for h1, h2*/
font-family: Arial;
text-align: left;
}
th {
text-align: center;
font-size: 12px; /*header font size.*/
background-color: #34568B;
color: white; /*font colour*/
padding: 5px 5px; /*padding */
font-weight: normal; /*remove bold heading*/
}
td {
font-size: 11px; /*row font size.*/
color: #34568B;
text-align: left;
padding: 2px 4px; /*This adds more space between columns. 1st digit=row height, 2nd digit=row width.*/
}
table {
white-space:nowrap;
border-collapse: collapse;
/* not using - border: 1px solid #F2F2F2;
/*width: 100%; /*each table will use x% screen width. Not using.*/
}
th, td { /*common settings for table header and table data.*/
font-family: Arial;
border: 1px solid #8B9BB4; /* table border colour */
}
tr:nth-child(even) 
{background-color: #34568B;} /*not sure what this does but you need it or it breaks line "This report was generated on..."*/
p {
font-family: Arial;
font-size: 11px;
color: #34568B
}
#CreationDate {
font-family: Arial;
color: orange;
font-size: 12px;
}
.Info {
color: #F7F9F9;
background-color: #4CAF50;
text-align: left; /*center text for this column only. Use it?*/
}
.Warning {
color: #34568B;
background-color: #FFCA28;
text-align: left; /*center text for this column only. Use it?*/
}
.Error {
color: #F7F9F9;
background-color: #DE3163;
text-align: left; /*center text for this column only. Use it?*/
}
</style>
"@
        <# CODE_SECTION_6
Get data.
#>
        $CodeSection = "6"
        # Summary
        $DbQuery = "SELECT 'Management Group' AS Column1,
ManagementGroupName AS Column2
FROM [$Script:OpsDbName].[dbo].[__MOMManagementGroupInfo__]
UNION ALL
SELECT 'Active Alerts',
CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[AlertView]
WHERE ResolutionState='1'
and Severity!='0'
UNION ALL
SELECT 'Total Windows Agents',
CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MT_Microsoft`$SystemCenter`$Agent]
UNION ALL
SELECT 'Total UNIX/Linux Agents',
CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MT_Microsoft`$Unix`$Computer]
UNION ALL
SELECT 'Total Network Devices',
CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MT_System`$NetworkManagement`$Node]
UNION ALL
SELECT 'Broken Windows Agents',
CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[ManagedEntityGenericView] as tb1 --table 1
INNER JOIN [$Script:OpsDbName].[dbo].[ManagedTypeView] as tb2 -- table 2
ON tb1.MonitoringClassId = tb2.Id
WHERE (tb2.Name = 'Microsoft.SystemCenter.Agent')
AND tb1.IsAvailable=0
AND (tb1.InMaintenanceMode=0 OR tb1.InMaintenanceMode IS NULL) --need InMaintenanceMode for this bit.
UNION ALL
SELECT 'Broken UNIX/Linux Agents',
CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[ManagedEntityGenericView] as tb1 --table 1
INNER JOIN ManagedTypeView as tb2 -- table 2
ON tb1.MonitoringClassId = tb2.Id
WHERE (tb2.Name='Microsoft.Unix.Computer')
AND tb1.IsAvailable=0
AND (InMaintenanceMode=0 OR InMaintenanceMode IS NULL) --need InMaintenanceMode for this bit.
UNION ALL
SELECT 'Pending Windows Agents',
CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[AgentPendingAction]
UNION ALL
SELECT 'Windows Servers in Maintenance Mode',
CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MaintenanceModeView] tb1
INNER JOIN BaseManagedEntity tb2
ON tb1.BaseManagedEntityId=tb2.BaseManagedEntityId
WHERE IsInMaintenanceMode='1'
AND FullName like 'Microsoft.SystemCenter.HealthService:%'
AND IsDeleted='0'"
        SQLQuery $Script:OpsDbServer $Script:OpsDbName $DbQuery
        $Script:Summary = $Script:Datatable | ConvertTo-Html -Property Column1, Column2 -Fragment -PreContent "<h2>Summary</h2>" $Script:Summary=$Script:Summary -replace '<tr><th>Column1</th><th>Column2</th></tr>', ''
        foreach ($i in $Script:Datatable) {
            $Name = $i.column1
            $Alert_Count = $i.column2
            # Get active alerts. This table will only display if there are active alerts.
            If ($Name -eq 'Active Alerts' -and $Alert_Count -gt 0) {
                <#
The 'Category AS 'Age' column in the query below is a dummy placeholder because we get a "read only" error when we try to use a fake column in the query.
#>
                $Now = Get-Date
                $DbQuery = "SELECT DISTINCT Id, TimeRaised AS 'Time Raised',
AlertStringName AS 'Alert Name',
MonitoringObjectDisplayName AS 'Object Name',
CustomField1 AS Category,
Owner AS 'Assigned To',
Category AS 'Age'
FROM [$OpsDbName].[dbo].[AlertView]
WHERE ResolutionState='1'
and Severity!='0'
ORDER BY TimeRaised desc"
                SQLQuery $Script:OpsDbServer $Script:OpsDbName $Script:DbQuery
                $ActiveAlerts = $Script:Datatable
                $ActiveAlerts | foreach {
                    #UTC_Convert_1 $_."Time Raised"
                    [DateTime]$_."Time Raised" = $_."Time Raised".ToLocalTime() # Default alert time is in UTC, this converts to local time.
                    $Time_Diff = New-TimeSpan -Start $_."Time Raised" -End $Now
                    $Time_Diff_Days = $Time_Diff.days
                    $Time_Diff_Hours = $Time_Diff.hours
                    $Time_Diff_Mins = $Time_Diff.minutes
                    [string]$_."Age" = "$Time_Diff_Days`d $Time_Diff_Hours`h $Time_Diff_Mins`m"
                }
                $ActiveAlerts = $Script:Datatable | ConvertTo-Html -Property 'Time Raised', 'Alert Name', 'Object Name', 'Category', 'Assigned To', 'Age' -Fragment -PreContent "<h2>Active Alerts</h2>" $ActiveAlerts=$ActiveAlerts -replace '<td>Unknown', '<td class="Warning">Unknown'
                <#
17.12.2021 - Not using this.
$ActiveAlerts=$ActiveAlerts -replace '<td>Error','<td class="Error">'
$ActiveAlerts=$ActiveAlerts -replace '<td>Warning','<td class="Warning">'
#>
            }
            # Get Broken Windows Agents. This table will only display if there are active alerts.
            If ($Name -eq 'Broken Windows Agents' -and $Alert_Count -gt 0) {
                #write-host -foregroundcolor yellow "yes" $DbQuery="SELECT UPPER (tb1.DisplayName) AS 'Server Name'
                FROM [$OpsDbName].[dbo].[ManagedEntityGenericView] as tb1 --table 1
                INNER JOIN [$OpsDbName].[dbo].[ManagedTypeView] as tb2 -- table 2
                ON tb1.MonitoringClassId = tb2.Id
                WHERE (tb2.Name = 'Microsoft.SystemCenter.Agent')
                AND tb1.IsAvailable=0
                AND (tb1.InMaintenanceMode=0 OR tb1.InMaintenanceMode IS NULL) --need InMaintenanceMode for this bit.
                ORDER BY 'Server Name'"
SQLQuery $OpsDbServer $OpsDbName $DbQuery
$Grey_Win_Agents=$Datatable | ConvertTo-Html -Property 'Server Name' -Fragment -PreContent "<h2>Broken Windows Agents</h2>" #$Grey_Win_Agents=$Grey_Win_Agents -replace '<tr><th>Server Name</th></tr>',''
}
# Get Broken UNIX/Linux Agents. This table will only display if there are active alerts.
If ($Name -eq 'Broken UNIX/Linux Agents' -and $Alert_Count -gt 0) {
#write-host -foregroundcolor yellow "yes" $DbQuery="SELECT UPPER (tb1.DisplayName) AS 'Server Name'
                FROM [$OpsDbName].[dbo].[ManagedEntityGenericView] as tb1 --table 1
                INNER JOIN [$OpsDbName].[dbo].[ManagedTypeView] as tb2 -- table 2
                ON tb1.MonitoringClassId = tb2.Id
                WHERE (tb2.Name='Microsoft.Unix.Computer')
                AND tb1.IsAvailable=0
                AND (InMaintenanceMode=0 OR InMaintenanceMode IS NULL) --need InMaintenanceMode for this bit.
                ORDER BY 'Server Name'"
SQLQuery $OpsDbServer $OpsDbName $DbQuery
$Grey_UNIX_Linux_Agents=$Datatable | ConvertTo-Html -Property 'Server Name' -Fragment -PreContent "<h2>Broken UNIX/Linux Agents</h2>" #$Grey_UNIX_Linux_Agents=$Grey_UNIX_Linux_Agents -replace '<tr><th>Server Name</th></tr>',''
}
# Get Pending Windows Agents. This table will only display if there are active alerts.
If ($Name -eq 'Pending Windows Agents' -and $Alert_Count -gt 0) {
$DbQuery="SELECT AgentName AS 'Server Name', LastModified AS 'Time Raised'
                FROM [$OpsDbName].[dbo].[AgentPendingAction]
                ORDER BY AgentName"
SQLQuery $OpsDbServer $OpsDbName $DbQuery
$Pending_Windows_Agents=$Script:Datatable
$Pending_Windows_Agents | foreach{
#UTC_Convert_1 $_."Time Raised"
[DateTime]$_."Time Raised"=$_."Time Raised".ToLocalTime() # Default alert time is in UTC, this converts to local time.
}
$Pending_Windows_Agents=$Datatable | ConvertTo-Html -Property 'Server Name', 'Time Raised' -Fragment -PreContent "<h2>Pending Windows Agents</h2>"
}
# Get Windows MM. This table will only display if there are active alerts.
If ($Name -eq 'Windows Servers in Maintenance Mode' -and $Alert_Count -gt 0) {
$DbQuery="SELECT DisplayName AS 'Server Name', StartTime AS 'Start Time', ScheduledEndTime AS 'End Time', [User] AS 'Scheduled By',
                CASE tb1.ReasonCode
                WHEN '0' THEN 'Other (Planned)' 
                WHEN '1' THEN 'Other (Unplanned)' 
                WHEN '2' THEN 'Hardware: Maintenance (Planned)' 
                WHEN '3' THEN 'Hardware: Maintenance (Unplanned)' 
                WHEN '4' THEN 'Hardware: Installation (Planned)' 
                WHEN '5' THEN 'Hardware: Installation (Unplanned)' 
                WHEN '6' THEN 'Operating System: Reconfiguration (Planned)' 
                WHEN '7' THEN 'Operating System: Reconfiguration (Unplanned)' 
                WHEN '8' THEN 'Application: Maintenance (Planned)' 
                WHEN '9' THEN 'Application: Maintenance (Unplanned)' 
                WHEN '10' THEN 'Application: Installation (Planned)' 
                WHEN '11' THEN 'Application: Unresponsive' 
                WHEN '12' THEN 'Application:  Unstable' 
                WHEN '13' THEN 'Security Issue' 
                WHEN '14' THEN 'Loss of network connectivity (Unplanned)' 
                END AS 'Category',
                tb1.Comments as Reason
                FROM [$OpsDbName].[dbo].[MaintenanceModeView] tb1
                inner join BaseManagedEntity tb2
                on tb1.BaseManagedEntityId=tb2.BaseManagedEntityId
                where IsInMaintenanceMode='1'
                and FullName like 'Microsoft.SystemCenter.HealthService:%'
                and IsDeleted='0'
                order by DisplayName"
SQLQuery $OpsDbServer $OpsDbName $DbQuery
$Windows_MM=$Script:Datatable
$Windows_MM | foreach{
[DateTime]$_."Start Time"=$_."Start Time".ToLocalTime() # Default alert time is in UTC, this converts to local time.
[DateTime]$_."End Time"=$_."End Time".ToLocalTime() # Default alert time is in UTC, this converts to local time.
}
$Windows_MM=$Datatable | ConvertTo-Html -Property 'Server Name', 'Start Time', 'End Time', 'Scheduled By', Category, Reason -Fragment -PreContent "<h2>Windows Servers in Maintenance Mode</h2>"
}
}
<# CODE_SECTION_10
Finish generating report.
#>
$CodeSection="10" $Header="<h1>$Identifier - SCOM Daily Report</h1>" $Report_Date="<p>This report was generated on $Start</p>" $EmailBody=ConvertTo-HTML -Head $Head -Body "$Header $Report_Date $GenerationTime $Summary $ActiveAlerts $Grey_Win_Agents $Grey_UNIX_Linux_Agents $Pending_Windows_Agents $Windows_MM"
SendEmail $EmailFromAddress $EmailToAddress $EmailServer $EmailPort
LogAndQuit
}
Catch
{
TerminatingError
}
}
DailyReport -EmailFromAddress $EmailFromAddress -EmailToAddress $EmailToAddress -EmailServer $EmailServer -EmailPort $EmailPort -Identifier $Identifier
]]>
                                </ScriptBody>
                                <Parameters>
                                    <Parameter>
                                        <Name>EmailFromAddress</Name>
                                        <Value>$Config/EmailFromAddress$</Value>
                                    </Parameter>
                                    <Parameter>
                                        <Name>EmailToAddress</Name>
                                        <Value>$Config/EmailToAddress$</Value>
                                    </Parameter>
                                    <Parameter>
                                        <Name>EmailServer</Name>
                                        <Value>$Config/EmailServer$</Value>
                                    </Parameter>
                                    <Parameter>
                                        <Name>EmailPort</Name>
                                        <Value>$Config/EmailPort$</Value>
                                    </Parameter>
                                    <Parameter>
                                        <Name>Identifier</Name>
                                        <Value>$Config/Identifier$</Value>
                                    </Parameter>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="WA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.UnsealedMpBackup" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="BackupFolder" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="BackupFolder" Selector="$Config/BackupFolder$" ParameterType="string" />
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>UnsealedMpBackup.ps1</ScriptName>
                                <ScriptBody><![CDATA[
Param ($BackupFolder)
Function Write-Log {
    Param($ScriptState)
    if ($ScriptState -eq "Information") {
        $EventId = 17609
        $EventLevel = 0 # 0=Info
    }
    else {
        $EventId = 17610
        $EventLevel = 2 # 2=Warning
    }
    $End = Get-Date
    $TimeCount = (New-TimeSpan -Start $StartTime -End $End)
    $Minutes = $TimeCount.Minutes
    $Seconds = $TimeCount.Seconds
    $Milliseconds = $TimeCount.Milliseconds
    $MomApi.LogScriptEvent("$ScriptName executed and ran for $Minutes`m $Seconds`s $Milliseconds`ms", $EventId, $EventLevel, "`nRunning As: $Account`nWorkflow Name: $MpWorkflow`nManagement Pack: $Mp ($MpVersion)`nPowerShell Version: $PSVersion`n$Message")
    Break
}
Function Get-ManagementPacks {
    # This logs terminating and non-terminating events.
    $ErrorActionPreference = "Stop"
    Try {
        # Set this here so info event is logged if there's no issues.
        $ScriptState = "Information"
        $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        <# FOR TESTING
        $BackupFolder = "C:\temp\UnsealedMpBackups"
        #>
        $PowerShellInstallDirectory = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2").InstallDirectory
        Import-module $PowerShellInstallDirectory`OperationsManager
        New-DefaultManagementGroupConnection
        Remove-Item -Path $BackupFolder\* -Recurse
        $ManagementPacks = Get-SCOMManagementPack | Where-Object { $_.Sealed -eq $False }
        $ManagementPacks | ForEach-Object {
            Export-SCOMManagementPack -ManagementPack:$_ -Path:$BackupFolder
        }
        $ScriptState = "Information"
        Write-Log -ScriptState $ScriptState
    }
    Catch {
        $ScriptState = "Warning"
        $Message += $_.Exception.Message
        Write-Log -ScriptState $ScriptState   
    }
}
# Declare all constants used by the script
[datetime]$StartTime = Get-Date
$MomApi = New-Object -comObject 'MOM.ScriptAPI'
$ScriptName = "UnsealedMpBackup.ps1"
$Account = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
$Mp = "Microsoft.SCOM.UpdateRollup.Monitoring"
$MpVersion = "2025.1.28.0"
$MpWorkflow = "Microsoft.SCOM.UpdateRollup.Rule.UnsealedMpBackup"
Get-ManagementPacks -BackupFolder $BackupFolder # Need this to pass params in properly.
]]>
                                </ScriptBody>
                                <Parameters>
                                    <Parameter>
                                        <Name>BackupFolder</Name>
                                        <Value>$Config/BackupFolder$</Value>
                                    </Parameter>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="WA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.ManagementGroupReport" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="ComputerName" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="MgReportFolder" type="xsd:string"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="MgReportFolder" Selector="$Config/MgReportFolder$" ParameterType="string" />
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>SCOM.MgReport.ps1</ScriptName>
                                <ScriptBody><![CDATA[
<#
notes as neede
#>
# Start MG Report
Param ($MgReportFolder)
<#**************************************** FUNCTION: LogAndQuit ****************************************#>
Function LogAndQuit {
    If ($Script:CountError -gt 0) {
        $EventId = 17615
        $EventLevel = 2
    }
    Else {
        $Script:CountError = 0 # If no errors set this value so it appears in the event.
        $EventId = 17614
        $EventLevel = 0
    }
    # Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
    $ObjMomApi.LogScriptEvent("SCOM.MgReport.ps1", $EventId, $EventLevel, "Management group report script executed.`nWorkflow Name: Microsoft.SCOM.UpdateRollup.Rule.MgReport`nManagement Pack: Microsoft.SCOM.UpdateRollup.Monitoring (2025.1.28.0)`nPowerShell Version: $PSVersion`nIssues Detected: $Script:CountError`n$Script:Message") # $Error dumps errors into the event.
}
<#**************************************** FUNCTION: CheckNull ****************************************#>
Function CheckNull ($PassedInParam) {
    If ([string]::IsNullOrEmpty($PassedInParam)) {
        $Script:IsItNull = $True # Update this so we can make decisions.
        $Script:CountError += 1
        $Script:Message += "[CODE_SECTION_$CodeSection] $ValueToCheck is empty. Error output: ($Error).`n"
    }
    Else {
        $Script:IsItNull = $False # Update this so we can make decisions.
    }
}
<#**************************************** FUNCTION: TerminatingError ****************************************#>
Function TerminatingError {
    $script:CountError += 1
    $script:Message += "[CODE_SECTION_$CodeSection] A terminating error occurred. Error output: (" + $_.Exception.Message + ").`n"
    LogAndQuit
}
<#**************************************** FUNCTION: SQLQuery ****************************************#>
Function SQLQuery ($Script:DbServer, $Script:DbName, $Script:DbQuery) {
    $Connection = New-Object System.Data.SQLClient.SQLConnection
    $Connection.ConnectionString = "Data Source=$DbServer;Database=$DbName;Trusted_Connection=True;"
    $Connection.Open()
    $Command = New-Object System.Data.SQLClient.SQLCommand
    $Command.Connection = $Connection
    $Command.CommandText = $DbQuery
    $Reader = $Command.ExecuteReader()
    $Script:Datatable = New-Object System.Data.DataTable
    $Script:Datatable.Load($Reader)
    $Connection.Close() 
}
<#**************************************** FUNCTION: MgReport ****************************************#>
Function MgReport {
    $ErrorActionPreference = "Stop"
    Try {
        <# FOR TESTING
$Error.Clear()
$MgReportFolder="C:\temp"
#>
        <# CODE_SECTION_1
Load things we'll need.
#>
        $CodeSection = "1" $Start = (Get-Date -format f) # use this to calculate report generation duration.
        $User = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
        $ObjMomApi = New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
        $SetupRegKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup" # don't do null check on these 4 reg values, the script is running so all good.
        $Script:OpsDbName = (Get-ItemProperty $SetupRegKey).DatabaseName
        $Script:OpsDbServer = (Get-ItemProperty $SetupRegKey).DatabaseServerName
        $Script:DWDbName = (Get-ItemProperty $SetupRegKey).DataWarehouseDBName
        $Script:DwDbServer = (Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
        <# CODE_SECTION_2.
Get powershell version.
This is shown in events to assist troubleshooting if powershell doesn't play nice.
#>
        $CodeSection = "2" $PSVersion = $PSVersionTable.PSVersion
        [string]$PSMajor = $PSVersion.Major
        [string]$PSMinor = $PSVersion.Minor
        $PSVersion = $PSMajor + "." + $PSMinor
        <# CODE_SECTION_3
Set common variables.
#>
        $CodeSection = "3" $ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
        $ValueToCheck = "ComputerFqdn"; CheckNull $ComputerFqdn # Expect value.
        <# CODE_SECTION_4
Check output folder and load SCOM module.
#>
        $CodeSection = "4"
        If (-Not(Test-Path -Path $MgReportFolder)) {
            $Script:CountError += 1
            $Script:Message += "[CODE_SECTION_$CodeSection] The report folder $MgReportFolder does not exist.`n"
        }
        Else {
            $PowerShellInstallDirectory = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2").InstallDirectory
            $ValueToCheck = "PowerShellInstallDirectory"; CheckNull $PowerShellInstallDirectory # Expect value.
            If ($Script:IsItNull -ne $True) {
                Import-module $PowerShellInstallDirectory`OperationsManager
                New-DefaultManagementGroupConnection
                $MgName = (Get-SCOMManagementGroup).Name
                $ValueToCheck = "MgName"; CheckNull $MgName # Expect value.
                <# may use later.
$MPs=Get-SCOMManagementPack | Where-Object {$_.Sealed -eq $False}
$MPs | ForEach-Object {
Export-SCOMManagementPack -ManagementPack:$_ -Path:$MgReportFolder
}
#>
            }
            <# CODE_SECTION_5
Build html/css for report.
#>
            $CodeSection = "5" $Head = @"
<style>
h1 {
font-size: 30px;
color: #555555;
}
h2 {
font-size: 20px;
color: #424949;
}
h3 {
font-size: 15px;
color: #555555;
}
h4 {
font-size: 12px;
color: #555555;
}
h1, h2, h3, h4 { /*common settings for h1, h2*/
font-family: Arial;
text-align: left;
}
th {
text-align: center;
font-size: 12px; /*header font size.*/
background-color: gray;
color: white; /*font colour*/
padding: 5px 5px; /*padding */
font-weight: normal; /*remove bold heading*/
}
td {
font-size: 11px; /*row font size.*/
color: #555555;
text-align: left;
padding: 2px 4px; /*This adds more space between columns. 1st digit=row height, 2nd digit=row width.*/
}
table {
white-space:nowrap;
border-collapse: collapse;
border: 1px solid #F2F2F2;
/*width: 100%; /*each table will use x% screen width. Not using.*/
}
th, td { /*common settings for table header and table data.*/
font-family: Arial;
border: 1px solid #F2F2F2;
}
tr:nth-child(even) {background-color: #F2F2F2;}
p {
font-family: Arial;
font-size: 11px;
color: #555555
}
#CreationDate {
font-family: Arial;
color: orange;
font-size: 12px;
}
.Info {
color: #F7F9F9;
background-color: #4CAF50;
text-align: left; /*center text for this column only. Use it?*/
}
.Warning {
color: #555555;
background-color: yellow;
text-align: left; /*center text for this column only. Use it?*/
}
.Error {
color: #F7F9F9;
background-color: #E74C3C;
text-align: left; /*center text for this column only. Use it?*/
}
.btn-group button {
background-color: gray;
font-size: 12px; /*row font size.*/
border: 1px solid gray;
color: white; /* White text */
/*padding: 10px 24px; /* Some padding */
padding: 5px 5px; /* Some padding */
cursor: pointer; /* Pointer/hand icon */
border-radius: 4px;
width:150px; /*remove to auto-size width*/
}
/* Add a background color on hover */
.btn-group button:hover {
background-color: #555555;
}
/*Change to this colour hovering over the index button.*/
a:hover {
color: #555555;
}
.indexbutton{
font-family: Arial;
position:fixed;
/*width:50px;
height:50px;*/
bottom:20px;
right:20px;
background-color:#4CAF50;
color: white;
border-radius:4px;
text-align:center;
box-shadow: 2px 2px 3px #999;
padding: 10px;
text-decoration: none; /*this removes hyperlinks over the text*/
}
</style>
"@
            $H2Index = "<h2><a id=Index>Index</a></h2>" $H1SCOMReport = "<h1>SCOM Management Group Report</h1>" $IndexButton = "<a href='#Index' class='indexbutton'>Index</a>" $IndexButtonGroup = "<div class='btn-group'; margin-left:100px;>
<a href='#Databases'><button>Databases</button></a>
<a href='#UpdateRollups'><button>Update Rollups</button></a>
</div>"
            <# CODE_SECTION_6
Mgmt group summary.
#>
            $CodeSection = "6" $DbQuery = "SELECT 'SCOM Version' AS Column1,
CASE 
WHEN ManagementServerVersion_E8B08CCC_887D_3193_5AF3_01E1225E8799 like '%2012 R2%' then 'Extended support - 2012 R2'
WHEN ManagementServerVersion_E8B08CCC_887D_3193_5AF3_01E1225E8799 like '%2016%' then '2016'
WHEN ManagementServerVersion_E8B08CCC_887D_3193_5AF3_01E1225E8799 like '%180%' then '1801'
WHEN ManagementServerVersion_E8B08CCC_887D_3193_5AF3_01E1225E8799 like '%2019%' then '2019'
ELSE 'Unknown - ' + ManagementServerVersion_E8B08CCC_887D_3193_5AF3_01E1225E8799
END AS Column2
FROM [$Script:OpsDbName].[dbo].[MTV_SCOM`$WindowsComputer]
WHERE RMS_771D4202_8806_363E_07CD_678590489569='yes'
UNION ALL
SELECT 'Active Alerts', CAST(CAST(COUNT(*) AS NVARCHAR) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[AlertView]
WHERE ResolutionState != '255'
UNION ALL /* I think this keeps them in current order. */
SELECT 'Windows Agents', CAST(CAST(COUNT(*) AS NVARCHAR) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MT_HealthService]
WHERE IsAgent='1'
UNION ALL
SELECT 'Unix/Linux Agents', CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MTV_Microsoft`$Unix`$Computer]
UNION ALL
SELECT 'Management Servers', CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].dbo.MT_Microsoft`$SystemCenter`$CollectionManagementServer
UNION ALL
SELECT 'Gateway Servers', CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MT_Microsoft`$SystemCenter`$GatewayManagementServer]
UNION ALL
SELECT 'ACS Collectors', CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MT_Microsoft`$SystemCenter`$ACS`$Collector]
UNION ALL
SELECT 'Network Devices', CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MT_System`$NetworkManagement`$Node]
UNION ALL
SELECT 'Broken Health Service',
CASE
WHEN CAST(COUNT(*) AS NVARCHAR) >=1 then 'bad' + CAST(COUNT(*) AS NVARCHAR)
ELSE CAST(COUNT(*) AS NVARCHAR)
END
FROM [$Script:OpsDbName].[dbo].[ManagedEntityGenericView]
WHERE (FullName LIKE '%Microsoft.Unix.Computer:%' AND MonitoringClassId='360E5A02-BC9E-0000-2614-1972E304088A' -- class of the heartbeat alert for unux/linux.
OR FullName LIKE '%Microsoft.SystemCenter.HealthService:%' AND MonitoringClassId='AB4C891F-3359-3FB6-0704-075FBFE36710') -- class of the heartbeat alert for windows.
AND IsAvailable='0'
AND IsDeleted='0'
UNION ALL
SELECT 'Certificates', CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MTV_SCOM`$WindowsComputer]
WHERE CertificateExpiry_C6B7EE9B_F90E_4559_9BBD_57C3C54411BF !='n/a'
UNION ALL
SELECT DISTINCT 'Maintenance Mode Jobs', CAST(COUNT(*) AS NVARCHAR)
FROM [$Script:OpsDbName].[dbo].[MaintenanceModeView]
WHERE IsInMaintenanceMode='1'"
            SQLQuery $Script:OpsDbServer $Script:OpsDbName $DbQuery
            $Summary = $Script:Datatable | ConvertTo-Html -Property Column1, Column2 -Fragment -PreContent "<h2>Summary</h2>" $Summary=$Summary -replace '<tr><th>Column1</th><th>Column2</th></tr>', ''
            $Summary = $Summary -replace '<td>Extended support - 2012 R2', '<td class="Warning">Extended support - 2012 R2'
            $Summary = $Summary -replace '<td>bad', '<td class="Warning">'
            <# CODE_SECTION_7
OpsDb database summary.
#>
            $CodeSection = "7" $DbQuery = "SELECT 'Database Name' as Column1, sd.name as Column2 
FROM sys.databases sd where name='$Script:OpsDbName'
UNION ALL
SELECT 'Collation', collation_name FROM sys.databases where name='$Script:OpsDbName'
UNION ALL
SELECT 'Broker enabled',
CASE
WHEN CAST(is_broker_enabled as varchar(10)) = 0 THEN 'ConfigIssue - Disabled' --had to do weird CAST because it's a 'bit' data type.
WHEN CAST(is_broker_enabled as varchar(10)) = 1 THEN 'Yes'
END FROM sys.databases where name='$Script:OpsDbName'
UNION ALL
SELECT 'Full-text enabled',
CASE
WHEN is_fulltext_enabled=0 THEN 'ConfigIssue - Disabled'
WHEN is_fulltext_enabled=1 THEN 'Yes'
END FROM sys.databases where name='$Script:OpsDbName'
UNION ALL
/* removing this, it's too tricky querying 2 sql servers.
SELECT DISTINCT 'Database Server', [OpsDbServer_C2985C1B_CDAC_AAAE_B887_A7BB58E537BB] --use distinct in CASE there's 2+ mgmt servers.
FROM [$Script:OpsDbName].[dbo].[MT_SCOM`$WindowsComputer]
WHERE OpsDbServer_C2985C1B_CDAC_AAAE_B887_A7BB58E537BB != 'n/a' --need this else we'll return agents too.
UNION ALL
*/
SELECT 'Clustered',
CASE 
WHEN SERVERPROPERTY('IsClustered') = 0 THEN 'No' 
WHEN SERVERPROPERTY('IsClustered') = 1 THEN 'Yes'
END 
UNION ALL
SELECT 'Last full backup',
CASE
WHEN CAST(max(backup_finish_date)as varchar(50)) is null then 'No backup'
WHEN CAST(max(backup_finish_date)as varchar(50)) < dateadd(day, -7, getdate()) then 'Over 7 days - ' + CAST(max(backup_finish_date)as varchar(50))
ELSE CAST(max(backup_finish_date)as varchar(50))
END
FROM msdb.dbo.backupset
where database_name='$Script:OpsDbName'
AND type='D'"
            SQLQuery $Script:OpsDbServer $Script:OpsDbName $DbQuery
            $OpsDb = $Script:Datatable | ConvertTo-Html -Property Column1, Column2 -Fragment -PreContent "<h2><a id=Databases>Databases</a></h2><h3>Operational Database \ Summary</h3>" $OpsDb=$OpsDb -replace '<tr><th>Column1</th><th>Column2</th></tr>', ''
            $OpsDb = $OpsDb -replace '<td>No backup', '<td class="Error">No backup'
            $OpsDb = $OpsDb -replace '<td>Over 7 days - ', '<td class="Warning">Over 7 days - '
            $OpsDb = $OpsDb -replace '<td>ConfigIssue - Disabled', '<td class="Error">Disabled'
            <# CODE_SECTION_8
OpsDb database file info.
#>
            $CodeSection = "8" $DbQuery = "USE $Script:OpsDbName
SELECT 
CASE 
WHEN alias_smf.type=0 THEN 'Database'
ELSE 'Log'
END AS 'File Type',
FORMAT(alias_sysfiles.size/128,'N0') + ' MB' as 'File Size',
FORMAT((FILEPROPERTY(alias_sysfiles.name,'SpaceUsed')/128),'N0') + ' MB' AS 'Used Space', 
FORMAT((alias_sysfiles.size/128)-(FILEPROPERTY(alias_sysfiles.name,'SpaceUsed')/128),'N0') + ' MB' AS 'Free Space', 
CASE 
WHEN alias_smf.growth=0 THEN 'Disabled'
ELSE 'Enabled'
END AS 'Autogrow',
alias_smf.physical_name AS 'Filename',
alias_smf.name AS 'Logical Name'
FROM dbo.sysfiles alias_sysfiles
INNER JOIN sys.master_files alias_smf ON alias_sysfiles.filename=alias_smf.physical_name
ORDER BY file_id"
            SQLQuery $Script:OpsDbServer $Script:OpsDbName $DbQuery
            $OpsDbFiles = $Script:Datatable | ConvertTo-Html -Property "File Type", "File Size", "Used Space", "Free Space", "Autogrow", "Filename", "Logical Name" -Fragment -PreContent "<h3>Operational Database \ Db Files</h3>" $OpsDbFiles=$OpsDbFiles -replace '<td>Disabled', '<td class="Error">Disabled'
            <# CODE_SECTION_9
DWDb database summary.
#>
            $CodeSection = "9" $DbQuery = "SELECT 'Database Name' as Column1, sd.name as Column2
FROM sys.databases sd where name='$Script:DWDbName'
UNION ALL
SELECT 'Collation', collation_name FROM sys.databases where name='$Script:DWDbName'
UNION ALL
SELECT 'Broker enabled',
CASE
WHEN CAST(is_broker_enabled as varchar(10)) = 0 THEN 'ConfigIssue - Disabled' --had to do weird CAST because it's a 'bit' data type.
WHEN CAST(is_broker_enabled as varchar(10)) = 1 THEN 'Yes'
END FROM sys.databases where name='$Script:DWDbName'
UNION ALL
SELECT 'Full-text enabled',
CASE
WHEN is_fulltext_enabled=0 THEN 'ConfigIssue - Disabled'
WHEN is_fulltext_enabled=1 THEN 'Yes'
END FROM sys.databases where name='$Script:DWDbName'
UNION ALL
/* removing this, it's too tricky querying 2 sql servers.
SELECT DISTINCT 'Database Server', [OpsDbServer_C2985C1B_CDAC_AAAE_B887_A7BB58E537BB] --use distinct in case there's 2+ mgmt servers.
FROM [$Script:OpsDbName].[dbo].[MT_SCOM`$WindowsComputer]
WHERE OpsDbServer_C2985C1B_CDAC_AAAE_B887_A7BB58E537BB != 'n/a' --need this else we'll return agents too.
UNION ALL
*/
SELECT 'Clustered',
CASE 
WHEN SERVERPROPERTY('IsClustered') = 0 THEN 'No' 
WHEN SERVERPROPERTY('IsClustered') = 1 THEN 'Yes'
END 
UNION ALL
SELECT 'Last full backup',
case
when CAST(max(backup_finish_date)as varchar(50)) is null then 'No backup'
when CAST(max(backup_finish_date)as varchar(50)) < dateadd(day, -7, getdate()) then 'Over 7 days - ' + CAST(max(backup_finish_date)as varchar(50))
ELSE CAST(max(backup_finish_date)as varchar(50))
END
FROM msdb.dbo.backupset
where database_name='$Script:DWDbName'
and type='D'" # wrong need to remove this.
            SQLQuery $Script:DwDbServer $Script:DWDbName $DbQuery
            $DWDb = $Script:Datatable | ConvertTo-Html -Property Column1, Column2 -Fragment -PreContent "<h3>Data Warehouse \ Summary</h3>" $DWDb=$DWDb -replace '<tr><th>Column1</th><th>Column2</th></tr>', ''
            $DWDb = $DWDb -replace '<td>No backup', '<td class="Error">No backup'
            $DWDb = $DWDb -replace '<td>Over 7 days - ', '<td class="Warning">Over 7 days - '
            $DWDb = $DWDb -replace '<td>ConfigIssue - Disabled', '<td class="Error">Disabled'
            <# CODE_SECTION_10
DWDb database file info.
#>
            $CodeSection = "10" $DbQuery = "USE $Script:DWDbName
SELECT 
CASE 
WHEN alias_smf.type=0 THEN 'Database'
ELSE 'Log'
END AS 'File Type',
FORMAT(alias_sysfiles.size/128,'N0') + ' MB' as 'File Size',
FORMAT((FILEPROPERTY(alias_sysfiles.name,'SpaceUsed')/128),'N0') + ' MB' AS 'Used Space', 
FORMAT((alias_sysfiles.size/128)-(FILEPROPERTY(alias_sysfiles.name,'SpaceUsed')/128),'N0') + ' MB' AS 'Free Space', 
CASE 
WHEN alias_smf.growth=0 THEN 'Disabled'
ELSE 'Enabled'
END AS 'Autogrow',
alias_smf.physical_name AS 'Filename',
alias_smf.name AS 'Logical Name'
FROM dbo.sysfiles alias_sysfiles
INNER JOIN sys.master_files alias_smf ON alias_sysfiles.filename=alias_smf.physical_name
ORDER BY file_id"
            SQLQuery $Script:DwDbServer $Script:DWDbName $DbQuery
            $DWDbFiles = $Script:Datatable | ConvertTo-Html -Property "File Type", "File Size", "Used Space", "Free Space", "Autogrow", "Filename", "Logical Name" -Fragment -PreContent "<h3>Data Warehouse \ Db Files</h3>" $DWDbFiles=$DWDbFiles -replace '<td>Disabled', '<td class="Error">Disabled'
            <# CODE_SECTION_10
?
#>
            $CodeSection = "10"
            <# CODE_SECTION_11
Update rollup info.
#>
            $CodeSection = "11" $DbQuery = "SELECT UPPER (DisplayName) As Computer
,AgentVersion_3AFB8DF2_255D_EF64_2996_AB381CA83F11 AS Agent
,[ManagementServerVersion_E8B08CCC_887D_3193_5AF3_01E1225E8799] AS ManagementServer
,[WebConsoleVersion_6EC692DE_61A1_190E_D016_A6D8039081C2] AS WebConsole
,[ReportServerVersion_A9D4505D_ADFE_5CF2_7E23_FFFC0ED131EB] AS ReportServer
,[GatewayServerVersion_C5C64EC6_1FAE_82EB_90BF_37D55CB4FF69] AS GatewayServer
,[ACSCollectorVersion_D788AA22_33A3_C547_BF37_5571B8416756] AS ACSCollector
,[ConsoleVersion_B993C88D_FD4E_DA45_4CD9_ABB39B7890CD] AS UIConsole
FROM [$Script:OpsDbName].[dbo].[MT_SCOM`$WindowsComputer]
ORDER BY Computer ASC"
            SQLQuery $Script:OpsDbServer $Script:OpsDbName $DbQuery
            $UpdateRollups = $Script:Datatable | Select-Object Computer, Agent, @{N = 'Management Server'; E = { $_.ManagementServer } }, @{N = 'Web Console'; E = { $_.WebConsole } }, @{N = 'Report Server'; E = { $_.ReportServer } }, @{N = 'Gateway Server'; E = { $_.GatewayServer } }, @{N = 'ACS Collector'; E = { $_.ACSCollector } }, @{N = 'UI Console'; E = { $_.UIConsole } } | ConvertTo-Html -Property Computer, Agent, "Management Server", "Web Console", "Report Server", "ACS Collector", "Gateway Server", "UI Console" -Fragment -PreContent "<h2><a id=UpdateRollups>Update Rollups</a></h2>" $UpdateRollups=$UpdateRollups -replace '<td>Unknown version', '<td class="Error">Unknown version'
            # $UpdateRollups=$UpdateRollups -replace '<td>Update required','<td class="Warning">Update required' # 22.12.2021 not using anymore. Removed from agent discovery script.
            <# CODE_SECTION_10
Finish generating report.
#>
            $CodeSection = "10" $GenerationTime = "<p>This report was generated on $ComputerFqdn by $User on $Start.</p>"
            ConvertTo-HTML -Head $Head -Body "$H1SCOMReport $GenerationTime $H2Index $IndexButtonGroup $Summary $OpsDb $OpsDbFiles $DWDb $DWDbFiles $UpdateRollups $ExampleParagraph $IndexButton" | Out-File "$MgReportFolder\$MgName`_SCOM_Report.html"
            <# FOR TESTING
Invoke-Item -Path "$MgReportFolder\$MgName`_SCOM_Report.html" # remove when done.
#>
        } # end test report path.
        LogAndQuit
    }
    Catch {
        TerminatingError
    }
}
MgReport -MgReportFolder $MgReportFolder # Need this to pass params in properly.
# End MG Report
]]>
                                </ScriptBody>
                                <Parameters>
                                    <Parameter>
                                        <Name>ComputerName</Name>
                                        <Value>$Config/ComputerName$</Value>
                                    </Parameter>
                                    <Parameter>
                                        <Name>MgReportFolder</Name>
                                        <Value>$Config/MgReportFolder$</Value>
                                    </Parameter>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="WA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.GetLogAnalyticsWorkspaces" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>SCOM.GetLogAnalyticsWorkspace.ps1</ScriptName>
                                <ScriptBody><![CDATA[
Function FoundNone {
    $Script:Output = "No Log Analytics workspaces found."
}
Function GetLAWorkspaces {
    $ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
    Write-Host "====================================="
    Write-Host "Task: Get Log Analytics workspaces"
    Write-Host "Computer: $ComputerFqdn"
    Write-Host "====================================="
    Write-Host
    $LAWorkspaceRegKey = "HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters\Service Connector Services"
    If (Test-Path $LAWorkspaceRegKey) {
        $BindLAWorkspaceRegKey = Get-Item $LAWorkspaceRegKey
        $LAWorkspaceCount = ($BindLAWorkspaceRegKey).SubKeyCount
        If ($LAWorkspaceCount -gt 0) {
            $ArrayLAWorkspaces = $BindLAWorkspaceRegKey.GetSubKeyNames()
            $ArrayLAWorkspaces | ForEach-Object {
                $LAWorkspaceId = $_.Substring(16)
                $LAWorkspaceTypeId = (Get-ItemProperty -Path $LAWorkspaceRegKey\$_)."Azure Cloud Type"
                Switch ($LAWorkspaceTypeId) {
                    "0" { $LAWorkspaceType = "Azure Commercial"; BREAK }
                    "1" { $LAWorkspaceType = "Azure US Government"; BREAK }
                    "2" { $LAWorkspaceType = "Azure China"; BREAK }
                    "3" { $LAWorkspaceType = "Azure US Nat"; BREAK }
                    "4" { $LAWorkspaceType = "Azure US Sec"; BREAK }
                    Default {
                        $LAWorkspaceType = "Unknown"
                    }
                }
                $LAWorkspaceConnectionStatusId = (Get-ItemProperty -Path $LAWorkspaceRegKey\$_)."Connection Status"
                If ($LAWorkspaceConnectionStatusId -eq 0) {
                    $LAWorkspaceConnectionStatus = "Connected"
                }
                Else {
                    $LAWorkspaceConnectionStatus = "Unknown"
                }
                $Output += "Workspace Id: $LAWorkspaceId`nCloud Type: $LAWorkspaceTypeId ($LAWorkspaceType)`nConnection Status: $LAWorkspaceConnectionStatusId ($LAWorkspaceConnectionStatus)`n`n"
            } # END FOR
        }
        Else {
            FoundNone
        }
    }
    Else {
        FoundNone
    }
    Write-Host $Output
}
GetLAWorkspaces    
]]>
                                </ScriptBody>
                                <Parameters>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="PSWA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.GetTlsSettings" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>SCOM.GetTLSRegSettings.ps1</ScriptName>
                                <ScriptBody><![CDATA[
Function CheckNull ($PassedInParam) {
    If ([string]::IsNullOrEmpty($PassedInParam)) {
        $Script:Message += "[WARNING] Missing value name: $_\$ValueToCheck`n"
    }
    Else {
        $Script:Message += "[INFO] Found value: $_\$ValueToCheck=$PassedInParam`n"
    }
}
Function RunScript {
    $ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
    Write-Host "====================================="
    Write-Host "Task: Get TLS1.2 registry settings"
    Write-Host "Computer: $ComputerFqdn"
    Write-Host "====================================="
    Write-Host
    $ArrayTLS12NETEnabled = "HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319", "HKLM:\SOFTWARE\WOW6432Node\Microsoft\.NETFramework\v4.0.30319"
    $ArrayTLS12NETEnabled | ForEach-Object {
        $Count += 1
        If (Test-Path -Path $_) {
            $SchUseStrongCrypto = (Get-ItemProperty $_).SchUseStrongCrypto
        }
        $ValueToCheck = "SchUseStrongCrypto"; CheckNull $SchUseStrongCrypto
    }
    $ArrayTLS12OSRegKey = "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client", "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server"
    $ArrayTLS12OSRegKey | ForEach-Object {
        If (Test-Path -Path $_) {
            $Enabled = (Get-ItemProperty $_).Enabled
            $DisabledByDefault = (Get-ItemProperty $_).DisabledByDefault
        }
        $ValueToCheck = "Enabled"; CheckNull $Enabled
        $ValueToCheck = "DisabledByDefault"; CheckNull $DisabledByDefault
    }
    $Script:Message
}
RunScript
]]>
                                </ScriptBody>
                                <Parameters>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="PSWA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.GetWindowsServices" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>SCOM.GetWindowsServices.ps1</ScriptName>
                                <ScriptBody><![CDATA[
$ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
Write-Host "====================================="
Write-Host "Task: Get Windows services"
Write-Host "Computer: $ComputerFqdn"
Write-Host "====================================="
Write-Host
$Output+="SVC_DISPLAYNAME^SVC_NAME^SVC_STATE^SVC_STARTMODE^SVC_STARTNAME^SVC_PROCESSID`n"
$Services=Get-WmiObject Win32_Service | Sort-Object DisplayName | Select-Object -Property DisplayName, Name, State, StartMode, StartName, ProcessId
$Services | ForEach-Object {
    $DisplayName = $_.DisplayName
    $Name = $_.Name
    $State = $_.State
    $StartMode = $_.StartMode
    $StartName = $_.StartName
    $ProcessId = $_.ProcessId
    $Output += "$DisplayName^$Name^$State^$StartMode^$StartName^$ProcessId`n"
}
$Output
]]>
                                </ScriptBody>
                                <Parameters>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="PSWA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.GetWindowsDiskInfo" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>SCOM.GetWindowsDiskInfo.ps1</ScriptName>
                                <ScriptBody><![CDATA[
$ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
Write-Host "====================================="
Write-Host "Task: Get disk info"
Write-Host "Computer: $ComputerFqdn"
Write-Host "====================================="
Write-Host
Set-Variable -Name "CONVERSION_FACTOR" -Value "1073741824"
Set-Variable -Name "FIXED_DISK" -Value "3"
$Volumes=Get-WmiObject Win32_Volume | Where-Object { $_.DriveType -eq $FIXED_DISK } | Sort-Object Name
$Volumes | ForEach-Object {
    $Name = $_.Name
    $Label = $_.Label
    $DriveType = $_.DriveType
    Switch ($DriveType) {
        "0" { $DriveType = "Unknown"; BREAK }
        "1" { $DriveType = "No Root Directory"; BREAK }
        "2" { $DriveType = "Removable Disk"; BREAK }
        "3" { $DriveType = "Local Disk"; BREAK }
        "4" { $DriveType = "Network Drive"; BREAK }
        "5" { $DriveType = "Compact Disc"; BREAK }
        "6" { $DriveType = "RAM Disk"; BREAK }
        Default { $DriveType = "Unknown" }
    }
    $FileSystem = $_.FileSystem
    $VolumeCapacity = "{0:n2}" -f ($_.Capacity / $CONVERSION_FACTOR)
    $VolumeUsedSpace = "{0:n2}" -f (($_.Capacity - $_.FreeSpace) / $CONVERSION_FACTOR)
    $VolumeFreeSpace = "{0:n2}" -f ($_.FreeSpace / $CONVERSION_FACTOR)
    $DirtyBitSet = $_.DirtyBitSet
    $Output += "VOLUME_NAME: $Name`nVOLUME_LABEL: $Label`nDRIVE_TYPE: $DriveType`nFILE_SYSTEM: $FileSystem`nCAPACITY: $VolumeCapacity GB`nUSED_SPACE: $VolumeUsedSpace GB`nFREE_SPACE: $VolumeFreeSpace GB`nDIRTY_BIT_SET: $DirtyBitSet   `n`n"
}
$Output
]]>
                                </ScriptBody>
                                <Parameters>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="PSWA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SystemCenter.ResetServiceStoreAction" Comment="Request Health Service Store Reset" Accessibility="Internal" Batching="false">
                <Configuration />
                <ModuleImplementation Isolation="Any">
                    <Native>
                        <ClassID>B253A4FA-71BE-4F5D-94D5-A46B0D2505AA</ClassID>
                    </Native>
                </ModuleImplementation>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
            <WriteActionModuleType ID="Microsoft.SCOM.UpdateRollup.WriteAction.LogWindowsTestEvent" Accessibility="Internal" Batching="false">
                <Configuration>
                    <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </Configuration>
                <OverrideableParameters>
                    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
                </OverrideableParameters>
                <ModuleImplementation Isolation="Any">
                    <Composite>
                        <MemberModules>
                            <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                                <ScriptName>LogWindowsTestEvent.ps1</ScriptName>
                                <ScriptBody><![CDATA[
try {
    $ObjMomApi = New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
    $ComputerFqdn = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
    Write-Host "====================================="
    Write-Host "Task: Log Windows Test Event"
    Write-Host "Computer: $ComputerFqdn"
    Write-Host "====================================="
    Write-Host
    $EventId = 17616
    $EventLevel = 0 # 0=Information, 1=Error, 2=Warning
    # Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
    $ObjMomApi.LogScriptEvent("LogWindowsTestEvent.ps1", $EventId, $EventLevel, "This is a test alert to check agent functionality. It is generated by running the 'Log Test Event' SCOM task.`nManagement Pack: Microsoft.SCOM.UpdateRollup.Monitoring (2025.1.28.0)")
    Write-Host Information event ID 17616 successfully written to the Operations Manager log.
    Write-Host
}
catch {
    Write-Host "Error:" $_.Exception.Message
    Write-Host
}
]]>
                                </ScriptBody>
                                <Parameters>
                                </Parameters>
                                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                            </WriteAction>
                        </MemberModules>
                        <Composition>
                            <Node ID="PSWA" />
                        </Composition>
                    </Composite>
                </ModuleImplementation>
                <OutputType>System!System.BaseData</OutputType>
                <InputType>System!System.BaseData</InputType>
            </WriteActionModuleType>
        </ModuleTypes>
    </TypeDefinitions>
    <!--Run built-in tasks.-->
    <Categories>
        <Category ID="SCOM.CategoryPingTask" Target="Microsoft.SCOM.UpdateRollup.Task.Ping" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" />
        <Category ID="SCOM.CategoryRDPTask" Target="Microsoft.SCOM.UpdateRollup.Task.RDP" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" />
    </Categories>
    <Monitoring>
        <!--Discoveries.-->
        <Discoveries>
            <Discovery ID="Microsoft.SCOM.UpdateRollup.Discovery.WindowsComputer" Target="SystemCenter!Microsoft.SystemCenter.HealthService" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
                <Category>Discovery</Category>
                <DiscoveryTypes>
                    <DiscoveryClass TypeID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer">
                        <Property PropertyID="ComputerType"/>
                        <Property PropertyID="OperatingSystem"/>
                        <Property PropertyID="Product"/>
                        <Property PropertyID="AgentInstallDirectory"/>
                        <Property PropertyID="AgentVersion"/>
                        <Property PropertyID="ManagementGroups"/>
                        <Property PropertyID="HealthServiceAccount"/>
                        <Property PropertyID="CertificateExpiry"/>
                        <Property PropertyID="ADIntegration"/>
                        <Property PropertyID="APMServiceStartMode"/>
                        <Property PropertyID="ACSForwarderServiceStartMode"/>
                        <Property PropertyID="LogAnalyticsWorkspaces"/>
                        <Property PropertyID="ManagementServerInstallDirectory"/>
                        <Property PropertyID="ManagementServerVersion"/>
                        <Property PropertyID="ConfigServiceAccount"/>
                        <Property PropertyID="DataAccessServiceAccount"/>
                        <Property PropertyID="OpsDbName"/>
                        <Property PropertyID="OpsDbServer"/>
                        <Property PropertyID="DWDbName"/>
                        <Property PropertyID="DwDbServer"/>
                        <Property PropertyID="ACSCollectorInstallDirectory"/>
                        <Property PropertyID="ACSCollectorVersion"/>
                        <Property PropertyID="ACSCollectorServiceAccount"/>
                        <Property PropertyID="RMS"/>
                        <Property PropertyID="GatewayServerInstallDirectory"/>
                        <Property PropertyID="GatewayServerVersion"/>
                        <Property PropertyID="WebConsoleInstallDirectory"/>
                        <Property PropertyID="WebConsoleVersion"/>
                        <Property PropertyID="AuthenticationMode"/>
                        <Property PropertyID="DefaultServer"/>
                        <Property PropertyID="WebConsoleUrl"/>
                        <Property PropertyID="ApmAdvisorUrl"/>
                        <Property PropertyID="ApmDiagnosticsUrl"/>
                        <Property PropertyID="ReportServerInstallDirectory"/>
                        <Property PropertyID="ReportServerVersion"/>
                        <Property PropertyID="ReportServerDwDbServer"/>
                        <Property PropertyID="ReportServerDWDBName"/>
                        <Property PropertyID="ReportServerUrl"/>
                        <Property PropertyID="SRSInstance"/>
                        <Property PropertyID="ReportServerServiceAccount"/>
                        <Property PropertyID="ConsoleInstallDirectory"/>
                        <Property PropertyID="ConsoleVersion"/>
                    </DiscoveryClass>
                </DiscoveryTypes>
                <DataSource ID="DS" TypeID="Microsoft.SCOM.UpdateRollup.DataSource.WindowsComputer">
                    <IntervalSeconds>86400</IntervalSeconds>
                    <SyncTime></SyncTime>
                    <TimeoutSeconds>120</TimeoutSeconds>
                </DataSource>
            </Discovery>
        </Discoveries>
        <!--Rules.-->
        <Rules>
            <Rule ID="Microsoft.SCOM.UpdateRollup.Rule.DailyReport" Enabled="false" Target="SystemCenter!Microsoft.SystemCenter.RootManagementServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
                <Category>Maintenance</Category>
                <DataSources>
                    <DataSource ID="DS" TypeID="System!System.Scheduler">
                        <Scheduler>
                            <SimpleReccuringSchedule>
                                <Interval Unit="Seconds">86400</Interval>
                                <SyncTime>08:00</SyncTime>
                            </SimpleReccuringSchedule>
                            <ExcludeDates />
                        </Scheduler>
                    </DataSource>
                </DataSources>
                <WriteActions>
                    <WriteAction ID="WA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.DailyReport">
                        <EmailFromAddress>from@email.address</EmailFromAddress>
                        <EmailToAddress>one@email.address,two@email.address</EmailToAddress>
                        <EmailServer>Smtp.server</EmailServer>
                        <EmailPort>Smtp.port</EmailPort>
                        <Identifier></Identifier>
                        <TimeoutSeconds>120</TimeoutSeconds>
                    </WriteAction>
                </WriteActions>
            </Rule>
            <Rule ID="Microsoft.SCOM.UpdateRollup.Rule.UnsealedMpBackup" Enabled="false" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
                <Category>Maintenance</Category>
                <DataSources>
                    <DataSource ID="DS" TypeID="System!System.Scheduler">
                        <Scheduler>
                            <SimpleReccuringSchedule>
                                <Interval Unit="Seconds">86400</Interval>
                                <SyncTime>05:00</SyncTime> <!-- E.g. AM 08:00, PM 20:00. -->
                            </SimpleReccuringSchedule>
                            <ExcludeDates />
                        </Scheduler>
                    </DataSource>
                </DataSources>
                <WriteActions>
                    <WriteAction ID="WA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.UnsealedMpBackup">
                        <BackupFolder>Add folder</BackupFolder>
                        <TimeoutSeconds>120</TimeoutSeconds>
                    </WriteAction>
                </WriteActions>
            </Rule>
            <Rule ID="Microsoft.SCOM.UpdateRollup.Rule.MgReport" Enabled="false" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
                <Category>Maintenance</Category>
                <DataSources>
                    <DataSource ID="Scheduler" TypeID="Microsoft.SCOM.UpdateRollup.DataSource.ManagementGroupReport">
                        <IntervalSeconds>86400</IntervalSeconds>
                        <SyncTime></SyncTime>
                    </DataSource>
                </DataSources>
                <WriteActions>
                    <WriteAction ID="WA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.ManagementGroupReport">
                        <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
                        <MgReportFolder></MgReportFolder>                        <!--LEAVE BLANK-->
                        <TimeoutSeconds>120</TimeoutSeconds>
                    </WriteAction>
                </WriteActions>
            </Rule>
            <Rule ID="Microsoft.SCOM.UpdateRollup.Rule.AlertOnLogWindowsTestEvent" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
                <Category>Alert</Category>
                <DataSources>
                    <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
                        <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
                        <LogName>Operations Manager</LogName>
                        <Expression>
                            <And>
                                <Expression>
                                    <SimpleExpression>
                                        <ValueExpression>
                                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                                        </ValueExpression>
                                        <Operator>Equal</Operator>
                                        <ValueExpression>
                                            <Value Type="UnsignedInteger">17616</Value>
                                        </ValueExpression>
                                    </SimpleExpression>
                                </Expression>
                                <Expression>
                                    <SimpleExpression>
                                        <ValueExpression>
                                            <XPathQuery Type="String">PublisherName</XPathQuery>
                                        </ValueExpression>
                                        <Operator>Equal</Operator>
                                        <ValueExpression>
                                            <Value Type="String">Health Service Script</Value>
                                        </ValueExpression>
                                    </SimpleExpression>
                                </Expression>
                                <Expression>
                                </Expression>
                            </And>
                        </Expression>
                    </DataSource>
                </DataSources>
                <WriteActions>
                    <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
                        <Priority>0</Priority>                        <!--Low-->
                        <Severity>0</Severity>                        <!--Information-->
                        <AlertName />
                        <AlertDescription />
                        <AlertOwner />
                        <AlertMessageId>$MPElement[Name="Microsoft.SCOM.UpdateRollup.Rule.AlertOnLogWindowsTestEvent.AlertMessage"]$</AlertMessageId>
                        <AlertParameters>
                            <AlertParameter1>$Data/EventDescription$</AlertParameter1>
                        </AlertParameters>
                        <Suppression/>
                        <Custom1 />
                        <Custom2 />
                        <Custom3 />
                        <Custom4 />
                        <Custom5 />
                        <Custom6 />
                        <Custom7 />
                        <Custom8 />
                        <Custom9 />
                        <Custom10 />
                    </WriteAction>
                </WriteActions>
            </Rule>
            <!-- Target is HealthService so we can alert on script warnings from all computers, not just discovered instances of Microsoft.SCOM.UpdateRollup.Class.WindowsComputer. -->
            <Rule ID="Microsoft.SCOM.UpdateRollup.Rule.PowerShellScriptWarning" Enabled="true" Target="SystemCenter!Microsoft.SystemCenter.HealthService" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
                <Category>Alert</Category>
                <DataSources>
                    <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
                        <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
                        <LogName>Operations Manager</LogName>
                        <Expression>
                            <And>
                                <Expression>
                                    <SimpleExpression>
                                        <ValueExpression>
                                            <XPathQuery Type="String">PublisherName</XPathQuery>
                                        </ValueExpression>
                                        <Operator>Equal</Operator>
                                        <ValueExpression>
                                            <Value Type="String">Health Service Script</Value>
                                        </ValueExpression>
                                    </SimpleExpression>
                                </Expression>
                                <Expression>
                                    <SimpleExpression>
                                        <ValueExpression>
                                            <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                                        </ValueExpression>
                                        <Operator>Equal</Operator>
                                        <ValueExpression>
                                            <Value Type="UnsignedInteger">17610</Value>
                                        </ValueExpression>
                                    </SimpleExpression>
                                </Expression>
                            </And>
                        </Expression>
                    </DataSource>
                </DataSources>
                <WriteActions>
                    <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
                        <Priority>0</Priority>
                        <Severity>1</Severity>
                        <AlertName />
                        <AlertDescription />
                        <AlertOwner />
                        <AlertMessageId>$MPElement[Name="Microsoft.SCOM.UpdateRollup.Rule.PowerShellScriptWarning.AlertMessage"]$</AlertMessageId>
                        <AlertParameters>
                            <AlertParameter1>$Data/EventDescription$</AlertParameter1>
                        </AlertParameters>
                        <Suppression />
                        <Custom1 />
                        <Custom2 />
                        <Custom3 />
                        <Custom4 />
                        <Custom5 />
                        <Custom6 />
                        <Custom7 />
                        <Custom8 />
                        <Custom9 />
                        <Custom10 />
                    </WriteAction>
                </WriteActions>
            </Rule>
        </Rules>
        <!--Tasks.-->
        <Tasks>
            <Task ID="Microsoft.SCOM.UpdateRollup.Task.RunCommand" Accessibility="Public" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Timeout="120" Remotable="true">
                <Category>Maintenance</Category>
                <WriteAction ID="PSWA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.RunCommand">
                    <TimeoutSeconds>60</TimeoutSeconds>
                    <RunCommand></RunCommand>
                </WriteAction>
            </Task>
            <Task ID="Microsoft.SCOM.UpdateRollup.Task.GetLogAnalyticsWorkspace" Accessibility="Public" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Timeout="120" Remotable="true">
                <Category>Maintenance</Category>
                <WriteAction ID="PSWA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.GetLogAnalyticsWorkspaces">
                    <TimeoutSeconds>180</TimeoutSeconds>
                </WriteAction>
            </Task>
            <Task ID="Microsoft.SCOM.UpdateRollup.Task.GetTLSRegSettings" Accessibility="Public" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Timeout="120" Remotable="true">
                <Category>Maintenance</Category>
                <WriteAction ID="PSWA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.GetTlsSettings">
                    <TimeoutSeconds>180</TimeoutSeconds>
                </WriteAction>
            </Task>
            <Task ID="Microsoft.SCOM.UpdateRollup.Task.GetWindowsServices" Accessibility="Public" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Timeout="120" Remotable="true">
                <Category>Maintenance</Category>
                <WriteAction ID="PSWA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.GetWindowsServices">
                    <TimeoutSeconds>180</TimeoutSeconds>
                </WriteAction>
            </Task>
            <Task ID="Microsoft.SCOM.UpdateRollup.Task.GetWindowsDiskInfo" Accessibility="Public" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Timeout="120" Remotable="true">
                <Category>Maintenance</Category>
                <WriteAction ID="PSWA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.GetWindowsDiskInfo">
                    <TimeoutSeconds>180</TimeoutSeconds>
                </WriteAction>
            </Task>
            <Task ID="Microsoft.SCOM.UpdateRollup.Task.ResetHealth" Comment="Request Health Service Store Reset" Accessibility="Internal" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Timeout="300" Remotable="true">
                <Category>Maintenance</Category>
                <WriteAction ID="ResetServiceStore" TypeID="Microsoft.SystemCenter.ResetServiceStoreAction" />
            </Task>
            <Task ID="Microsoft.SCOM.UpdateRollup.Task.LogWindowsTestEvent" Accessibility="Public" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Timeout="120" Remotable="true">
                <Category>Maintenance</Category>
                <WriteAction ID="PSWA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.LogWindowsTestEvent">
                    <TimeoutSeconds>180</TimeoutSeconds>
                </WriteAction>
            </Task>
            <Task ID="Microsoft.SCOM.UpdateRollup.Task.RemoveMgmtGroup" Accessibility="Public" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" Timeout="120" Remotable="true">
                <Category>Maintenance</Category>
                <WriteAction ID="PSWA" TypeID="Microsoft.SCOM.UpdateRollup.WriteAction.RemoveManagementGroup">
                    <ManagementGroups></ManagementGroups>
                    <TimeoutSeconds>180</TimeoutSeconds>
                </WriteAction>
            </Task>
        </Tasks>
        <!--Monitors.-->
        <Monitors>
        </Monitors>
    </Monitoring>
    <Presentation>
        <ConsoleTasks>
            <ConsoleTask ID="Microsoft.SCOM.UpdateRollup.Task.Ping" Accessibility="Internal" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" RequireOutput="true">
                <Assembly>Microsoft.SCOM.UpdateRollup.Resource.Ping</Assembly>
                <Handler>ShellHandler</Handler>
                <Parameters>
                    <Argument Name="WorkingDirectory" />
                    <Argument Name="Application">%windir%\system32\ping.exe</Argument>
                    <Argument>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Argument>
                </Parameters>
            </ConsoleTask>
            <ConsoleTask ID="Microsoft.SCOM.UpdateRollup.Task.RDP" Accessibility="Internal" Enabled="true" Target="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" RequireOutput="false">
                <Assembly>Microsoft.SCOM.UpdateRollup.Resource.RDP</Assembly>
                <Handler>ShellHandler</Handler>
                <Parameters>
                    <Argument Name="WorkingDirectory" />
                    <Argument Name="Application">%windir%\system32\mstsc.exe</Argument>
                    <Argument>/v:</Argument>
                    <Argument>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ /f</Argument>
                </Parameters>
            </ConsoleTask>
        </ConsoleTasks>
        <StringResources>
            <StringResource ID="Microsoft.SCOM.UpdateRollup.Rule.AlertOnLogWindowsTestEvent.AlertMessage" />
            <StringResource ID="Microsoft.SCOM.UpdateRollup.Rule.PowerShellScriptWarning.AlertMessage" />
        </StringResources>
    </Presentation>
    <LanguagePacks>
        <LanguagePack ID="ENU" IsDefault="true">
            <DisplayStrings>
                <!--Management pack.-->
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Monitoring">
                    <Name>Microsoft SCOM Update Rollup Monitoring</Name>
                    <Description>Collects SCOM update rollup information.</Description>
                </DisplayString>
                <!--Classes.-->
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer">
                    <Name>Windows Computer Update Rollup</Name>
                    <Description>Shows update rollup information for Windows computers.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ComputerType">
                    <Name>Computer Type</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="OperatingSystem">
                    <Name>Operating System</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="Product">
                    <Name>Product</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="AgentInstallDirectory">
                    <Name>Agent Install Directory</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="AgentVersion">
                    <Name>Agent Version</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ManagementGroups">
                    <Name>Management Groups</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="HealthServiceAccount">
                    <Name>Health Service Account</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="CertificateExpiry">
                    <Name>Certificate Expiry (YMDT)</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ADIntegration">
                    <Name>AD Integration</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="APMServiceStartMode">
                    <Name>APM Service Start Mode</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ACSForwarderServiceStartMode">
                    <Name>ACS Forwarder Service Start Mode</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="LogAnalyticsWorkspaces">
                    <Name>Log Analytics Workspaces</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ManagementServerInstallDirectory">
                    <Name>Management Server Install Directory</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ManagementServerVersion">
                    <Name>Management Server Version</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ConfigServiceAccount">
                    <Name>Config Service Account</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="DataAccessServiceAccount">
                    <Name>Data Access Service Account</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="OpsDbName">
                    <Name>Operations Manager Db Name</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="OpsDbServer">
                    <Name>Operations Manager Db Server</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="DWDbName">
                    <Name>Data Warehouse Db Name</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="DwDbServer">
                    <Name>Data Warehouse Db Server</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ACSCollectorInstallDirectory">
                    <Name>ACS Collector Install Directory</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ACSCollectorVersion">
                    <Name>ACS Collector Version</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ACSCollectorServiceAccount">
                    <Name>ACS Collector Service Account</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="RMS">
                    <Name>RMS</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="GatewayServerInstallDirectory">
                    <Name>Gateway Server Install Directory</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="GatewayServerVersion">
                    <Name>Gateway Server Version</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="WebConsoleInstallDirectory">
                    <Name>Web Console Install Directory</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="WebConsoleVersion">
                    <Name>Web Console Version</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="AuthenticationMode">
                    <Name>Authentication Mode</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="DefaultServer">
                    <Name>Default Server</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="WebConsoleUrl">
                    <Name>Web Console Url</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ApmAdvisorUrl">
                    <Name>Apm Advisor Url</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ApmDiagnosticsUrl">
                    <Name>Apm Diagnostics Url</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ReportServerInstallDirectory">
                    <Name>Report Server Install Directory</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ReportServerVersion">
                    <Name>Report Server Version</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ReportServerDwDbServer">
                    <Name>Data Warehouse Db Server</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ReportServerDWDBName">
                    <Name>Data Warehouse Db Name</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ReportServerUrl">
                    <Name>Report Server Url</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="SRSInstance">
                    <Name>SRS Instance</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ReportServerServiceAccount">
                    <Name>Report Server Service Account</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ConsoleVersion">
                    <Name>Console Version</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Class.WindowsComputer" SubElementID="ConsoleInstallDirectory">
                    <Name>Console Install Directory</Name>
                </DisplayString>
                <!--Discoveries.-->
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Discovery.WindowsComputer">
                    <Name>Windows Computer Update Rollup PowerShell Discovery</Name>
                    <Description>This discovery gets the properties of class Microsoft.SCOM.UpdateRollup.Class.WindowsComputer.</Description>
                </DisplayString>
                <!--Rules.-->
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Rule.DailyReport">
                    <Name>Daily Report</Name>
                    <Description>This rule runs a PowerShell script at 8am everyday that emails a summary of active alerts to selected recipients. For this rule to work 1) Add Resolution state Name=Assigned, ID=1. 2) Configure overrides EmailFromAddress, EmailToAddress, EmailServer, EmailPort, Identifier</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Rule.UnsealedMpBackup">
                    <Name>Management Pack Backup</Name>
                    <Description />
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Rule.MgReport">
                    <Name>Management Group Report</Name>
                    <Description />
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Rule.AlertOnLogWindowsTestEvent">
                    <Name>Log Test Event</Name>
                    <Description>Generates an alert when event ID 17616 is detected in the Operations Manager log.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Rule.AlertOnLogWindowsTestEvent.AlertMessage">
                    <Name>Test Alert - Windows agent</Name>
                    <Description>{0}</Description>
                </DisplayString>
                <!--Monitors.-->
                <!--Tasks.-->
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.RunCommand">
                    <Name>Run command</Name>
                    <Description>WARNING: This task will run any command line you specify.
Add the command and parameters as the override i.e. w32tm /query /status.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.RemoveMgmtGroup">
                    <Name>Remove Mgmt Group</Name>
                    <Description>Removes management groups using the agent configuration object (AgentConfigManager.MgmtSvcCfg) then cleans up leftover folders or reg keys. Enter a comma separated list of management groups in the ManagementGroups override. WARNING! This task restarts the HealthService.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.GetLogAnalyticsWorkspace">
                    <Name>Get Log Analytics workspaces</Name>
                    <Description>This task shows information about Log Analytics workspaces configured on the computer.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.GetTLSRegSettings">
                    <Name>Get TLS 1.2 registry settings</Name>
                    <Description>This task shows the state of the registry settings required for TLS 1.2.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.GetWindowsServices">
                    <Name>Get services</Name>
                    <Description>This task shows information about Windows services.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.GetWindowsDiskInfo">
                    <Name>Get disk info</Name>
                    <Description>This task shows information about fixed disks i.e. used/free space.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.ResetHealth">
                    <Name>Flush Cache</Name>
                    <Description>WARNING: Only run this task on agents. Do not run it on management servers or gateway servers.
This task will reset all state in the Health Service. This includes the state of rules, monitors, outgoing data, and cached management packs.  Since this task will reset the service, status of this task will not be delivered since outgoing task status is part of what is reset by this task. A warning event with Id 103 is logged to the Operations Manager log.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.LogWindowsTestEvent">
                    <Name>Log Test Event</Name>
                    <Description>This task is used to check agent functionality. It logs a test event (ID=17616) to the Operations Manager log on the selected computer. A rule will detect the event and generate an alert.</Description>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.Ping">
                    <Name>Ping</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Task.RDP">
                    <Name>RDP</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Rule.PowerShellScriptWarning">
                    <Name>PowerShell Script Warning</Name>
                </DisplayString>
                <DisplayString ElementID="Microsoft.SCOM.UpdateRollup.Rule.PowerShellScriptWarning.AlertMessage">
                    <Name>PowerShell Script Warning</Name>
                    <Description>{0}</Description>
                </DisplayString>
            </DisplayStrings>
            <KnowledgeArticles>
            </KnowledgeArticles>
        </LanguagePack>
    </LanguagePacks>
    <Resources>
        <Assembly ID="Microsoft.SCOM.UpdateRollup.Resource.Ping" Accessibility="Public" FileName="Microsoft.SCOM.UpdateRollup.Task.Ping" HasNullStream="true" QualifiedName="Microsoft.SCOM.UpdateRollup.Task.Ping" />
        <Assembly ID="Microsoft.SCOM.UpdateRollup.Resource.RDP" Accessibility="Public" FileName="Microsoft.SCOM.UpdateRollup.Task.RDP" HasNullStream="true" QualifiedName="Microsoft.SCOM.UpdateRollup.Task.RDP" />
    </Resources>
</ManagementPack>
